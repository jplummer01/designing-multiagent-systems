{
  "repository": {
    "owner": "victordibia",
    "name": "multiagent-systems-with-autogen",
    "branch": "main",
    "base_url": "https://raw.githubusercontent.com/victordibia/multiagent-systems-with-autogen/refs/heads/main/course/"
  },
  "usecases": {
    "rag_agent": {
      "title": "RAG Agents",
      "description": "Retrieval Augmented Generation (RAG) explores the use of external knowledge sources to improve the quality of generated text from a model. External knowlege may come from providing an agent with access to tools that it can intelligently call based on the task, or explicitly retrieving relevant context from a datastore (e.g., a vector database) .",
      "domains": [
        "media"
      ],
      "tags": [
        "rag",
        "tools"
      ],
      "implementations": [
        {
          "framework": "autogen_agentchat",
          "title": "Autogen Agentchat Implementation",
          "description": "Implementation using autogen_agentchat",
          "code": {
            "path": "/samples/rag_agent/autogen_agentchat/app.py",
            "language": "python",
            "loc": 32,
            "githubUrl": "https://github.com/victordibia/multiagent-systems-with-autogen/blob/main/course/samples/rag_agent/autogen_agentchat/app.py",
            "metadata": {
              "title": "RAG Agents",
              "description": "Retrieval Augmented Generation (RAG) explores the use of external knowledge sources to improve the quality of generated text from a model. External knowlege may come from providing an agent with access to tools that it can intelligently call based on the task, or explicitly retrieving relevant context from a datastore (e.g., a vector database) .",
              "blog": "https://newsletter.victordibia.com/p/how-to-build-your-own-openai-operator",
              "domains": [
                "media"
              ],
              "tags": [
                "rag",
                "tools"
              ]
            }
          },
          "results": {
            "path": "/samples/rag_agent/autogen_agentchat/results.json"
          }
        }
      ]
    },
    "hello_world": {
      "title": "Hello World Agent",
      "description": "A agent implementation that demonstrates the basic concepts of defining an agent that used a generative AI model and tools to address tasks. Users can explore how different frameworks handle basic message passing and agent communication.",
      "domains": [
        "basics",
        "education"
      ],
      "tags": [
        "beginner",
        "tools"
      ],
      "implementations": [
        {
          "framework": "autogen_agentchat",
          "title": "Autogen Agentchat Implementation",
          "description": "Implementation using autogen_agentchat",
          "code": {
            "path": "/samples/hello_world/autogen_agentchat/app.py",
            "language": "python",
            "loc": 32,
            "githubUrl": "https://github.com/victordibia/multiagent-systems-with-autogen/blob/main/course/samples/hello_world/autogen_agentchat/app.py",
            "metadata": {
              "title": "Hello World Agent",
              "description": "Built using the AutoGen AgentChat API",
              "domains": [
                "basics",
                "education"
              ],
              "tags": [
                "beginner",
                "tools"
              ],
              "blog": "https://newsletter.victordibia.com/p/a-friendly-introduction-to-the-autogen"
            }
          },
          "results": {
            "path": "/samples/hello_world/autogen_agentchat/results.json"
          }
        },
        {
          "framework": "autogen_core",
          "title": "Autogen Core Implementation",
          "description": "Implementation using autogen_core",
          "code": {
            "path": "/samples/hello_world/autogen_core/app.py",
            "language": "python",
            "loc": 120,
            "githubUrl": "https://github.com/victordibia/multiagent-systems-with-autogen/blob/main/course/samples/hello_world/autogen_core/app.py",
            "metadata": {
              "title": "Hello World Agent",
              "description": "Built using the AutoGen Core API",
              "domains": [
                "basics",
                "education"
              ],
              "tags": [
                "beginner",
                "tools"
              ],
              "blog": "https://newsletter.victordibia.com/p/a-friendly-introduction-to-the-autogen"
            }
          },
          "results": {
            "path": "/samples/hello_world/autogen_core/results.json"
          }
        },
        {
          "framework": "google_adk",
          "title": "Google Adk Implementation",
          "description": "Implementation using google_adk",
          "code": {
            "path": "/samples/hello_world/google_adk/app.py",
            "language": "python",
            "loc": 77,
            "githubUrl": "https://github.com/victordibia/multiagent-systems-with-autogen/blob/main/course/samples/hello_world/google_adk/app.py",
            "metadata": {
              "title": "Hello World Agent",
              "description": "Built using the Google Agent Development Kit (ADK).",
              "domains": [
                "basics",
                "education"
              ],
              "tags": [
                "beginner",
                "tools"
              ],
              "blog": "https://newsletter.victordibia.com/p/a-friendly-introduction-to-the-autogen"
            }
          },
          "results": {
            "path": "/samples/hello_world/google_adk/results.json"
          }
        },
        {
          "framework": "langgraph",
          "title": "Langgraph Implementation",
          "description": "Implementation using langgraph",
          "code": {
            "path": "/samples/hello_world/langgraph/app.py",
            "language": "python",
            "loc": 76,
            "githubUrl": "https://github.com/victordibia/multiagent-systems-with-autogen/blob/main/course/samples/hello_world/langgraph/app.py",
            "metadata": {
              "title": "Hello World Agent",
              "description": "Built using the LangGraph framework",
              "domains": [
                "basics",
                "education"
              ],
              "tags": [
                "beginner",
                "tools"
              ]
            }
          },
          "results": {
            "path": "/samples/hello_world/langgraph/results.json"
          }
        },
        {
          "framework": "openai_agents",
          "title": "Openai Agents Implementation",
          "description": "Implementation using openai_agents",
          "code": {
            "path": "/samples/hello_world/openai_agents/app.py",
            "language": "python",
            "loc": 46,
            "githubUrl": "https://github.com/victordibia/multiagent-systems-with-autogen/blob/main/course/samples/hello_world/openai_agents/app.py",
            "metadata": {
              "title": "Hello World Agent",
              "description": "Built using the OpenAI Agents SDK API",
              "domains": [
                "basics",
                "education"
              ],
              "tags": [
                "beginner",
                "tools"
              ],
              "blog": "https://newsletter.victordibia.com/p/a-friendly-introduction-to-the-autogen"
            }
          },
          "results": {
            "path": "/samples/hello_world/openai_agents/results.json"
          }
        }
      ]
    },
    "voice_agent": {
      "title": "Voice Agents",
      "description": "An implementation of a voice enabled multi-agent system where speech to text models are used to transcribe user queries and text to speech models are used to read out a summarized version of agent responses. .",
      "domains": [
        "research"
      ],
      "tags": [
        "ui",
        "groupchat-pattern"
      ],
      "implementations": [
        {
          "framework": "autogen_agentchat",
          "title": "Autogen Agentchat Implementation",
          "description": "Implementation using autogen_agentchat",
          "code": {
            "path": "/samples/voice_agent/autogen_agentchat/app.py",
            "language": "python",
            "loc": 421,
            "githubUrl": "https://github.com/victordibia/multiagent-systems-with-autogen/blob/main/course/samples/voice_agent/autogen_agentchat/app.py",
            "metadata": {
              "title": "Voice Agents",
              "description": "An implementation of a voice enabled multi-agent system where speech to text models are used to transcribe user queries and text to speech models are used to read out a summarized version of agent responses. .",
              "blog": "https://newsletter.victordibia.com/p/how-to-build-voice-agents-with-autogen",
              "domains": [
                "research"
              ],
              "tags": [
                "ui",
                "groupchat-pattern"
              ]
            }
          },
          "results": {
            "path": "/samples/voice_agent/autogen_agentchat/results.json"
          }
        }
      ]
    },
    "router_pattern": {
      "title": "Router Pattern",
      "description": "A mock implementation of a Sales Multi-Agent System using a Router Pattern. A Router Agent receives user messages and routes them to specialized agents - LeadQualificationAgent, QuotationAgent, ProductInfoAgent, and SalesFollowupAgent.",
      "domains": [
        "salese"
      ],
      "tags": [
        "router-pattern",
        "pattern"
      ],
      "implementations": [
        {
          "framework": "autogen_core",
          "title": "Autogen Core Implementation",
          "description": "Implementation using autogen_core",
          "code": {
            "path": "/samples/router_pattern/autogen_core/app.py",
            "language": "python",
            "loc": 163,
            "githubUrl": "https://github.com/victordibia/multiagent-systems-with-autogen/blob/main/course/samples/router_pattern/autogen_core/app.py",
            "metadata": {
              "title": "Router Pattern",
              "description": "A mock implementation of a Sales Multi-Agent System using a Router Pattern. A Router Agent receives user messages and routes them to specialized agents - LeadQualificationAgent, QuotationAgent, ProductInfoAgent, and SalesFollowupAgent.",
              "domains": [
                "multiagent"
              ],
              "tags": [
                "router-pattern",
                "pattern"
              ]
            }
          },
          "results": {
            "path": "/samples/router_pattern/autogen_core/results.json"
          }
        }
      ]
    },
    "interface_agent": {
      "title": "Browser Interface Agents",
      "description": "A multi-agent system that addresses tasks by controlling/driving a web browser, similar to the OpenAI Operator agent. The AutoGen implementation includes 3 agents - a WebSurfer agent that controls the browser, an AssistantAgent that verifies progress, and a UserAgent that will request human feedback when necessary.",
      "domains": [
        "media"
      ],
      "tags": [
        "browser",
        "operator",
        "human-in-the-loop"
      ],
      "implementations": [
        {
          "framework": "autogen_agentchat",
          "title": "Autogen Agentchat Implementation",
          "description": "Implementation using autogen_agentchat",
          "code": {
            "path": "/samples/interface_agent/autogen_agentchat/app.py",
            "language": "python",
            "loc": 40,
            "githubUrl": "https://github.com/victordibia/multiagent-systems-with-autogen/blob/main/course/samples/interface_agent/autogen_agentchat/app.py",
            "metadata": {
              "title": "Browser Interface Agents",
              "description": "Built using the AutoGen AgentChat API, includes 3 agents - a WebSurfer agent that addresses tasks by controlling/driving a web browser, an AssistantAgent that verifies progress and a UserAgent that will request human feedback when necessary.",
              "blog": "https://newsletter.victordibia.com/p/how-to-build-your-own-openai-operator",
              "domains": [
                "browser",
                "interfaceagent"
              ],
              "tags": [
                "tools"
              ]
            }
          },
          "results": {
            "path": "/samples/interface_agent/autogen_agentchat/results.json"
          }
        }
      ]
    },
    "deep_research": {
      "title": "Deep Research Agents",
      "description": "An implementation of a multi-agent system that explores multiple reasoning steps across multiple data sources to synthesize results to complex research tasks. Implemented using an AssistantAgent that performs web searches and analyzes information, a Verifier agent that ensures research quality and completeness, a Summary agent that provides detailed markdown summaries, and a SelectorGroupChat team that manages the order in which each agent acts based on conversation context.",
      "domains": [
        "research"
      ],
      "tags": [
        "research",
        "tools"
      ],
      "implementations": [
        {
          "framework": "autogen_agentchat",
          "title": "Autogen Agentchat Implementation",
          "description": "Implementation using autogen_agentchat",
          "code": {
            "path": "/samples/deep_research/autogen_agentchat/app.py",
            "language": "python",
            "loc": 89,
            "githubUrl": "https://github.com/victordibia/multiagent-systems-with-autogen/blob/main/course/samples/deep_research/autogen_agentchat/app.py",
            "metadata": {
              "title": "Deep Research Agents",
              "description": "An implementation of a multi-agent system that explores multiple reasoning steps across multiple data sources to synthesize results to complex research tasks. Implemented using an AssistantAgent that performs web searches and analyzes information, a Verifier agent that ensures research quality and completeness, a Summary agent that provides detailed markdown summaries, and a SelectorGroupChat team that manages the order in which each agent acts based on conversation context.",
              "blog": "https://newsletter.victordibia.com/p/how-to-build-your-own-openai-operator",
              "domains": [
                "research"
              ],
              "tags": [
                "research",
                "tools"
              ]
            }
          },
          "results": {
            "path": "/samples/deep_research/autogen_agentchat/results.json"
          }
        }
      ]
    },
    "travel_planning": {
      "title": "Travel Planning Agents",
      "description": "An implementation of a multi-agent system that creates personalized travel itineraries through a coordinated planning process. Implemented using a Planner Agent that develops comprehensive travel routes based on traveler preferences, a Local Agent that recommends authentic experiences and hidden gems, a Language Agent that provides essential communication tips for the destination, and a Travel Summary Agent that integrates all recommendations into a cohesive final itinerary. The system uses a SelectorGroupChat team that manages the workflow between agents to progressively build comprehensive travel plans while minimizing unnecessary user involvement.",
      "domains": [
        "travel",
        "tourism"
      ],
      "tags": [
        "tools",
        "groupchat-pattern",
        "web-search"
      ],
      "implementations": [
        {
          "framework": "autogen_agentchat",
          "title": "Autogen Agentchat Implementation",
          "description": "Implementation using autogen_agentchat",
          "code": {
            "path": "/samples/travel_planning/autogen_agentchat/app.py",
            "language": "python",
            "loc": 121,
            "githubUrl": "https://github.com/victordibia/multiagent-systems-with-autogen/blob/main/course/samples/travel_planning/autogen_agentchat/app.py",
            "metadata": {
              "title": "Travel Planning Agents",
              "description": "An implementation of a multi-agent system that creates personalized travel itineraries through a coordinated planning process. Implemented using a Planner Agent that develops comprehensive travel routes based on traveler preferences, a Local Agent that recommends authentic experiences and hidden gems, a Language Agent that provides essential communication tips for the destination, and a Travel Summary Agent that integrates all recommendations into a cohesive final itinerary. The system uses a SelectorGroupChat team that manages the workflow between agents to progressively build comprehensive travel plans while minimizing unnecessary user involvement.",
              "domains": [
                "travel",
                "tourism"
              ],
              "tags": [
                "tools",
                "groupchat-pattern",
                "web-search"
              ]
            }
          },
          "results": {
            "path": "/samples/travel_planning/autogen_agentchat/results.json"
          }
        }
      ]
    },
    "mcp_tools": {
      "title": "MCP Tool Agent",
      "description": "An implementation demonstrating how to integrate Model Context Protocol (MCP) servers with AutoGen agents. This example shows how to connect an agent to an MCP server for fetching web resources, enabling content summarization and analysis. You can extend it to any MCP server.",
      "domains": [
        "research"
      ],
      "tags": [
        "mcp",
        "tools"
      ],
      "implementations": [
        {
          "framework": "autogen_agentchat",
          "title": "Autogen Agentchat Implementation",
          "description": "Implementation using autogen_agentchat",
          "code": {
            "path": "/samples/mcp_tools/autogen_agentchat/app.py",
            "language": "python",
            "loc": 25,
            "githubUrl": "https://github.com/victordibia/multiagent-systems-with-autogen/blob/main/course/samples/mcp_tools/autogen_agentchat/app.py",
            "metadata": {
              "title": "MCP Tool Agent",
              "description": "An implementation demonstrating how to integrate Model Context Protocol (MCP) servers with AutoGen agents. This example shows how to connect an agent to an MCP server for fetching web resources, enabling content summarization and analysis. You can extend it to any MCP server.",
              "domains": [
                "research"
              ],
              "tags": [
                "mcp",
                "tools"
              ],
              "blog": "https://newsletter.victordibia.com/p/you-have-ai-fatigue-thats-why-you"
            }
          },
          "results": {
            "path": "/samples/mcp_tools/autogen_agentchat/results.json"
          }
        }
      ]
    },
    "book_generator": {
      "title": "Book Generator with Gemini 2.0",
      "description": "A multi-agent system that demonstrates collaborative story generation using Gemini 2.0. The system consists of two agents: a StoryGeneratorAgent that creates structured story content and a BookGeneratorAgent that handles image generation and PDF compilation. Features include structured JSON communication between agents, integration of non-openai models (Gemini 2.0), control flow routing using topics and messages and integration of tools (e.g. image generation, PDF generation).",
      "domains": [
        "media"
      ],
      "tags": [
        "gemini"
      ],
      "implementations": [
        {
          "framework": "autogen_core",
          "title": "Autogen Core Implementation",
          "description": "Implementation using autogen_core",
          "code": {
            "path": "/samples/book_generator/autogen_core/app.py",
            "language": "python",
            "loc": 141,
            "githubUrl": "https://github.com/victordibia/multiagent-systems-with-autogen/blob/main/course/samples/book_generator/autogen_core/app.py",
            "metadata": {
              "title": "Book Generator with Gemini 2.0",
              "description": "Built using the AutoGen Core API. ",
              "domains": [
                "multiagent"
              ],
              "tags": [
                "tools"
              ]
            }
          },
          "results": {
            "path": "/samples/book_generator/autogen_core/results.json"
          }
        }
      ]
    },
    "investment_agent": {
      "title": "Investment Advisory Agents",
      "description": "An implementation of a multi-agent system that creates personalized investment portfolios through a coordinated research and analysis process. Implemented using a Client Profiler Agent that analyzes client requirements, a Research Strategy Agent that crafts targeted search queries, a Research Agent that performs market research and data analysis, a Portfolio Constructor that builds recommendations, a Verifier agent that ensures compliance and suitability, and a Summary agent that generates a complete investment proposal. The system uses a SelectorGroupChat team that manages the workflow between agents to progressively build comprehensive investment recommendations.",
      "domains": [
        "finance"
      ],
      "tags": [
        "tools",
        "groupchat-pattern"
      ],
      "implementations": [
        {
          "framework": "autogen_agentchat",
          "title": "Autogen Agentchat Implementation",
          "description": "Implementation using autogen_agentchat",
          "code": {
            "path": "/samples/investment_agent/autogen_agentchat/app.py",
            "language": "python",
            "loc": 169,
            "githubUrl": "https://github.com/victordibia/multiagent-systems-with-autogen/blob/main/course/samples/investment_agent/autogen_agentchat/app.py",
            "metadata": {
              "title": "Investment Advisory Agents",
              "description": "An implementation of a multi-agent system that creates personalized investment portfolios through a coordinated research and analysis process. Implemented using a Client Profiler Agent that analyzes client requirements, a Research Strategy Agent that crafts targeted search queries, a Research Agent that performs market research and data analysis, a Portfolio Constructor that builds recommendations, a Verifier agent that ensures compliance and suitability, and a Summary agent that generates a complete investment proposal. The system uses a SelectorGroupChat team that manages the workflow between agents to progressively build comprehensive investment recommendations.",
              "domains": [
                "finance"
              ],
              "tags": [
                "tools",
                "groupchat-pattern"
              ]
            }
          },
          "results": {
            "path": "/samples/investment_agent/autogen_agentchat/results.json"
          }
        }
      ]
    }
  },
  "metadata": {
    "domains": [
      "basics",
      "education",
      "finance",
      "media",
      "research",
      "salese",
      "tourism",
      "travel"
    ],
    "frameworks": [
      "autogen_agentchat",
      "autogen_core",
      "google_adk",
      "langgraph",
      "openai_agents"
    ]
  }
}