{
  "version": "1.0",
  "python": [
    {
      "name": "minimal_sample",
      "category": "uncategorized",
      "file_path": "python/samples/getting_started/minimal_sample.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/minimal_sample.py",
      "language": "python",
      "processed": true,
      "description": "This minimal sample demonstrates how to create a simple agent using the OpenAIChatClient in the Agent Framework, integrating a custom synchronous tool for retrieving weather information. It highlights essential concepts such as defining tools as callable functions, creating an agent with instructions and tools, and running the agent asynchronously. Developers migrating from AutoGen, Semantic Kernel, or LangChain can reference this example to understand basic agent creation, tool integration, and asynchronous execution in the new framework.",
      "tags": [
        "agent",
        "tools",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "override_result_with_middleware",
      "category": "middleware",
      "file_path": "python/samples/getting_started/middleware/override_result_with_middleware.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/middleware/override_result_with_middleware.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the use of middleware in the Azure AI Agent Framework to intercept and override agent function results after execution, supporting both streaming and non-streaming outputs. It covers key concepts such as asynchronous middleware, manipulating AgentRunContext results, and handling streaming responses via async generators. Developers migrating from frameworks like AutoGen or Semantic Kernel should reference this example when needing to implement custom result transformations or overrides within middleware, especially for applications requiring nuanced control over agent output formatting and streaming behavior.",
      "tags": [
        "middleware",
        "streaming",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "decorator_middleware",
      "category": "middleware",
      "file_path": "python/samples/getting_started/middleware/decorator_middleware.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/middleware/decorator_middleware.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the use of @agent_middleware and @function_middleware decorators to explicitly define middleware functions in the Agent Framework without requiring type annotations. It covers key concepts such as safe middleware detection, context handling before and after agent and function execution, and highlights the benefits of explicit middleware declaration for maintainability and clarity. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this to understand the new middleware approach emphasizing decorators over type annotations for improved code readability and safety.",
      "tags": [
        "middleware",
        "agent",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "function_based_middleware",
      "category": "middleware",
      "file_path": "python/samples/getting_started/middleware/function_based_middleware.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/middleware/function_based_middleware.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates implementing function-based middleware in the Microsoft Agent Framework, illustrating how to write lightweight, async middleware functions that intercept and manage agent and function invocations. Key concepts include security validation middleware to block sensitive queries and logging middleware to track execution timing, showcasing how middleware can control agent behavior without using class-based structures. Developers migrating from frameworks like AutoGen or Semantic Kernel should reference this example when transitioning to function-based middleware patterns for simpler, stateless, and asynchronous request processing within agents.",
      "tags": [
        "middleware",
        "agent",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "exception_handling_with_middleware",
      "category": "middleware",
      "file_path": "python/samples/getting_started/middleware/exception_handling_with_middleware.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/middleware/exception_handling_with_middleware.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates centralized exception handling in the Agent Framework using middleware. It highlights how to catch and gracefully handle function-level exceptions, such as timeouts from unstable data services, by overriding function responses to provide more user-friendly error messages. Developers migrating from frameworks like AutoGen or Semantic Kernel should reference this example to implement resilient error handling and to incorporate middleware patterns effectively within their agents.",
      "tags": [
        "middleware",
        "agent",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "agent_and_run_level_middleware",
      "category": "middleware",
      "file_path": "python/samples/getting_started/middleware/agent_and_run_level_middleware.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/middleware/agent_and_run_level_middleware.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the implementation of both agent-level and run-level middleware in the Agent Framework, showcasing how middleware can be structured to handle security validation, performance monitoring, debugging, priority handling, and caching. It covers core middleware concepts such as persistent agent-wide middleware versus isolated run-specific middleware, execution order, and metadata sharing across middleware layers. Developers migrating from AutoGen, Semantic Kernel, or LangChain frameworks can reference this to understand applying middleware patterns effectively for request validation, logging, and optimization within the Agent Framework.",
      "tags": [
        "middleware",
        "agent",
        "advanced",
        "autogen_migration"
      ]
    },
    {
      "name": "middleware_termination",
      "category": "middleware",
      "file_path": "python/samples/getting_started/middleware/middleware_termination.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/middleware/middleware_termination.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the use of middleware in the Agent Framework to control and terminate the execution flow of an AI agent. It showcases both pre-termination middleware, which can halt processing before the agent runs (e.g., for filtering inappropriate content), and post-termination middleware, which can terminate after the agent's response, useful for limiting response counts or enforcing policies. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this sample valuable for understanding how to integrate middleware for request interception, early exits, and fine-grained control over agent execution lifecycle within the Agent Framework.",
      "tags": [
        "middleware",
        "agent",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "shared_state_middleware",
      "category": "middleware",
      "file_path": "python/samples/getting_started/middleware/shared_state_middleware.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/middleware/shared_state_middleware.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates implementing function-based middleware within the Agent Framework using a shared state pattern encapsulated in a class. It covers key concepts such as middleware chaining, shared state management between middleware functions, and enhancing function execution results, illustrating how middleware can collaboratively modify agent behavior. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this reference useful for adopting middleware patterns that require stateful interactions across multiple middleware layers in an agent workflow.",
      "tags": [
        "middleware",
        "agent",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "class_based_middleware",
      "category": "middleware",
      "file_path": "python/samples/getting_started/middleware/class_based_middleware.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/middleware/class_based_middleware.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates implementing class-based middleware in the Agent Framework by extending AgentMiddleware and FunctionMiddleware base classes. It showcases key concepts such as intercepting and modifying agent requests and function invocations, enabling security checks to block sensitive queries and logging function execution details for observability. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this example useful for adopting stateful and object-oriented middleware patterns that enhance control over query processing and function calls.",
      "tags": [
        "middleware",
        "agent",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "chat_middleware",
      "category": "middleware",
      "file_path": "python/samples/getting_started/middleware/chat_middleware.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/middleware/chat_middleware.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to implement chat middleware within the Microsoft Agent Framework to observe, modify, and override chat messages before they reach AI models. It showcases both class-based and function-based middleware approaches, highlighting middleware registration at both the agent and run levels. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this sample to understand how to intercept and control chat inputs and outputs effectively using middleware for security, input modification, and enhanced observability.",
      "tags": [
        "middleware",
        "chat",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "failing_tools",
      "category": "tools",
      "file_path": "python/samples/getting_started/tools/failing_tools.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/tools/failing_tools.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how the Agent Framework gracefully handles exceptions thrown by tools during execution, allowing the agent to recover and continue the conversation seamlessly. It showcases key concepts such as tool integration, error handling within tools, and maintaining conversation state despite runtime failures. Developers migrating from AutoGen, Semantic Kernel, or LangChain will find this example useful for implementing robust tool-based agents capable of managing failures without interrupting user interactions.",
      "tags": [
        "agent",
        "tools",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "ai_tool_with_approval_and_threads",
      "category": "tools",
      "file_path": "python/samples/getting_started/tools/ai_tool_with_approval_and_threads.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/tools/ai_tool_with_approval_and_threads.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates how to implement AI-powered tools with approval workflows using threads within the Agent Framework. It highlights automatic thread-based message management, tool invocation with required user approval, and handling both approval and rejection cases. Developers migrating from frameworks like AutoGen or Semantic Kernel should reference this to understand how to manage human-in-the-loop approval workflows seamlessly while leveraging thread state management for context preservation.",
      "tags": [
        "tools",
        "agent",
        "human_in_loop",
        "autogen_migration"
      ]
    },
    {
      "name": "ai_tool_with_approval",
      "category": "tools",
      "file_path": "python/samples/getting_started/tools/ai_tool_with_approval.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/tools/ai_tool_with_approval.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates integrating AI functions as tools within an agent that require explicit user approval before execution, showcasing how to implement interactive approval workflows without using threading. It covers key Agent Framework concepts such as AI function decorators with approval modes, handling user input requests in both streaming and non-streaming contexts, and managing multi-turn conversations that incorporate user consent. Developers migrating from AutoGen, Semantic Kernel, or LangChain will find this guidance essential for implementing secure, human-in-the-loop tool executions within agents, especially when approvals are necessary for sensitive or critical function calls.",
      "tags": [
        "agent",
        "tools",
        "human_in_loop",
        "autogen_migration"
      ]
    },
    {
      "name": "in_memory_mode",
      "category": "devui",
      "file_path": "python/samples/getting_started/devui/in_memory_mode.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/devui/in_memory_mode.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to register and serve multiple agents and workflows in-memory using the Agent Framework DevUI, exposing them as OpenAI-compatible API endpoints. It covers core concepts such as creating ChatAgents with tool functions, building simple multi-step Workflows using Executors and handlers, and launching a development UI server to interact with these entities. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this for straightforward, in-memory entity management and serving without external registries, facilitating quick prototyping and testing.",
      "tags": [
        "agent",
        "workflow",
        "devui",
        "beginner"
      ]
    },
    {
      "name": "azure_chat_multimodal",
      "category": "multimodal_input",
      "file_path": "python/samples/getting_started/multimodal_input/azure_chat_multimodal.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/multimodal_input/azure_chat_multimodal.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to utilize the Azure OpenAI Chat Client to process multimodal inputs, specifically combining text and image data for analysis. It covers key Agent Framework concepts such as constructing ChatMessage objects with multiple content types including TextContent and DataContent for images, and how to authenticate using Azure credentials for chat completions. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this sample to understand how to handle multimodal chat interactions with Azure's new Chat Completions API and integrate image data seamlessly within chat workflows.",
      "tags": [
        "chat_client",
        "multimodal",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_responses_multimodal",
      "category": "multimodal_input",
      "file_path": "python/samples/getting_started/multimodal_input/azure_responses_multimodal.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/multimodal_input/azure_responses_multimodal.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to utilize the Azure OpenAI Responses API for multimodal input, specifically processing both images and PDF documents within conversations. It showcases key Agent Framework concepts such as creating chat messages with mixed content types (text and data), handling role-based messaging, and asynchronously invoking the Azure client for responses. Developers migrating from frameworks like AutoGen or Semantic Kernel will find this useful for adapting to Agent Framework's approach to multimodal input handling and Azure authentication integration.",
      "tags": [
        "agent",
        "multimodal",
        "azure_openai",
        "beginner"
      ]
    },
    {
      "name": "openai_chat_multimodal",
      "category": "multimodal_input",
      "file_path": "python/samples/getting_started/multimodal_input/openai_chat_multimodal.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/multimodal_input/openai_chat_multimodal.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to use the OpenAIChatClient from the Agent Framework to handle multimodal inputs including images, audio, and PDF documents. It showcases key concepts such as creating ChatMessage objects with various DataContent types and asynchronously interacting with GPT-4o models specialized for different media types. Developers migrating from frameworks like AutoGen or Semantic Kernel will find this sample valuable for implementing multimodal chat capabilities in an async Python environment, leveraging the structured message and media handling abstractions of the Agent Framework.",
      "tags": [
        "agent",
        "chat_client",
        "multimodal",
        "autogen_migration"
      ]
    },
    {
      "name": "simple_context_provider",
      "category": "context_providers",
      "file_path": "python/samples/getting_started/context_providers/simple_context_provider.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/context_providers/simple_context_provider.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to implement a custom context provider in the Agent Framework to maintain and update user-specific information (like name and age) across a chat conversation. It showcases key concepts such as context providers for state management, structured response parsing with Pydantic models, and seamless integration with Azure AI services for dynamic information extraction. Developers migrating from AutoGen, Semantic Kernel, or LangChain can reference this sample to understand how to manage conversational context and memory within the Agent Framework's chat agents effectively.",
      "tags": [
        "agent",
        "context_providers",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "agent_as_mcp_server",
      "category": "mcp",
      "file_path": "python/samples/getting_started/mcp/agent_as_mcp_server.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/mcp/agent_as_mcp_server.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to expose an Agent Framework agent as an MCP server using the OpenAIResponsesClient. It covers key concepts such as creating an agent with custom tools (functions), defining agent metadata like name and description, and running the agent as a server that communicates via standard IO streams. Developers migrating from AutoGen, Semantic Kernel, or LangChain will find this sample useful for understanding how to setup and deploy agents as standalone MCP servers for integration with MCP-compliant hosts.",
      "tags": [
        "agent",
        "beginner",
        "mcp",
        "autogen_migration"
      ]
    },
    {
      "name": "mcp_api_key_auth",
      "category": "mcp",
      "file_path": "python/samples/getting_started/mcp/mcp_api_key_auth.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/mcp/mcp_api_key_auth.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to authenticate with MCP servers using API key headers within the Agent Framework, showcasing secure and straightforward API key-based authentication patterns. It covers key concepts such as configuring authentication headers, instantiating MCPStreamableHTTPTool with custom headers, and integrating it with a ChatAgent that utilizes OpenAIResponsesClient. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this example useful to understand how to handle authentication securely and integrate external tools into agents within the Agent Framework ecosystem.",
      "tags": [
        "agent",
        "tools",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "agent_observability",
      "category": "observability",
      "file_path": "python/samples/getting_started/observability/agent_observability.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/observability/agent_observability.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to integrate observability into an Agent Framework chat agent by using OpenTelemetry tracing to monitor and trace interactions with the agent. It covers key concepts such as setting up observability infrastructure, creating traces and spans around agent chat sessions, and instrumenting asynchronous tools within the agent workflow. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this sample to understand how to implement comprehensive diagnostics and telemetry in their agent applications for enhanced monitoring and debugging capabilities.",
      "tags": [
        "agent",
        "observability",
        "chat_client",
        "beginner"
      ]
    },
    {
      "name": "advanced_manual_setup_console_output",
      "category": "observability",
      "file_path": "python/samples/getting_started/observability/advanced_manual_setup_console_output.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/observability/advanced_manual_setup_console_output.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates manual configuration of OpenTelemetry to capture and export traces, logs, and metrics directly to the console. It covers key observability concepts within the Agent Framework, such as setting up explicit logger, tracer, and meter providers, along with processors and exporters to collect telemetry data from AI service executions. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this when they need fine-grained, customizable observability setup beyond helper utilities to integrate telemetry in their AI-powered applications.",
      "tags": [
        "observability",
        "advanced",
        "autogen_migration",
        "agent"
      ]
    },
    {
      "name": "workflow_observability",
      "category": "observability",
      "file_path": "python/samples/getting_started/observability/workflow_observability.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/observability/workflow_observability.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to instrument and collect telemetry from an Agent Framework workflow using OpenTelemetry tracing. It covers key concepts such as defining executors, building sequential workflows with WorkflowBuilder, and capturing detailed tracing spans for workflow execution and message passing. Developers migrating from AutoGen, Semantic Kernel, or LangChain can reference this to implement observability features that provide end-to-end visibility into workflow processing and executor interactions.",
      "tags": [
        "observability",
        "workflow",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "advanced_zero_code",
      "category": "observability",
      "file_path": "python/samples/getting_started/observability/advanced_zero_code.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/observability/advanced_zero_code.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates configuring observability in an AI application with zero code changes using OpenTelemetry auto-instrumentation and environment variable setup. It highlights how telemetry is collected automatically during AI service execution, including detailed tracing of chat operations and tool executions within spans, without modifying the application code. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this approach valuable to seamlessly integrate observability and tracing without coupling telemetry logic to their AI workflows or agents.",
      "tags": [
        "observability",
        "advanced",
        "autogen_migration",
        "chat_client"
      ]
    },
    {
      "name": "setup_observability_with_parameters",
      "category": "observability",
      "file_path": "python/samples/getting_started/observability/setup_observability_with_parameters.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/observability/setup_observability_with_parameters.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to configure and utilize observability within the Agent Framework using inline parameters for telemetry setup, including tracing, logging, and metrics. It showcases scenarios such as running chat clients with or without streaming and executing AI functions while collecting telemetry data seamlessly sent to various backends like OTLP or Application Insights. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can refer to this sample to understand integrating robust observability features into their agent applications for better monitoring and diagnostics.",
      "tags": [
        "agent",
        "observability",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "setup_observability_with_env_var",
      "category": "observability",
      "file_path": "python/samples/getting_started/observability/setup_observability_with_env_var.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/observability/setup_observability_with_env_var.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to configure and use observability features within the Agent Framework by setting up telemetry via environment variables. It covers key concepts such as automatic tracing, logging, and metrics collection for chat clients and AI functions, leveraging the OpenTelemetry standard and Agent Framework's observability utilities. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this to integrate tracing and telemetry seamlessly into their AI service workflows for enhanced monitoring and diagnostics.",
      "tags": [
        "observability",
        "chat_client",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_ai_chat_client_with_observability",
      "category": "observability",
      "file_path": "python/samples/getting_started/observability/azure_ai_chat_client_with_observability.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/observability/azure_ai_chat_client_with_observability.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to integrate observability and telemetry into AI services using the Azure AI client within the Agent Framework. It highlights key concepts such as setting up Azure AI project telemetry with Application Insights, enabling distributed tracing, and streaming AI-generated responses with tool integration. Developers migrating from AutoGen, Semantic Kernel, or LangChain should reference this to understand best practices for implementing observability and tracing for AI agent workflows in Azure.",
      "tags": [
        "agent",
        "observability",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_ai_agent_observability",
      "category": "observability",
      "file_path": "python/samples/getting_started/observability/azure_ai_agent_observability.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/observability/azure_ai_agent_observability.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to integrate Azure AI Agent telemetry with Application Insights for enhanced observability using the Azure AI client. It covers key Agent Framework concepts such as setting up telemetry, tracing using OpenTelemetry, and implementing a simple ChatAgent with custom tools and streaming responses. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this sample to understand how to enable real-time observability and tracing in their Azure AI agent implementations.",
      "tags": [
        "observability",
        "agent",
        "chat_client",
        "intermediate"
      ]
    },
    {
      "name": "custom_chat_message_store_thread",
      "category": "threads",
      "file_path": "python/samples/getting_started/threads/custom_chat_message_store_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/threads/custom_chat_message_store_thread.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to implement and use a custom chat message store within the Agent Framework, specifically showing integration with an OpenAI chat client and thread management. It covers key concepts such as custom message serialization and deserialization, thread state persistence, and the use of user-defined storage mechanisms instead of the default in-memory store. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this sample valuable for understanding how to maintain conversation state across sessions and implement custom persistence layers in their chat agents.",
      "tags": [
        "agent",
        "chat_client",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "suspend_resume_thread",
      "category": "threads",
      "file_path": "python/samples/getting_started/threads/suspend_resume_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/threads/suspend_resume_thread.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to suspend and resume conversation threads within the Agent Framework using both service-managed and in-memory thread management. It highlights key concepts such as thread serialization and deserialization, enabling the preservation and restoration of conversational state across sessions. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this sample valuable for understanding stateful chat interactions and thread lifecycle management in the Agent Framework.",
      "tags": [
        "agent",
        "thread",
        "checkpoint",
        "autogen_migration"
      ]
    },
    {
      "name": "redis_chat_message_store_thread",
      "category": "threads",
      "file_path": "python/samples/getting_started/threads/redis_chat_message_store_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/threads/redis_chat_message_store_thread.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to use Redis as a persistent chat message store with the Agent Framework, enabling conversation memory across multiple sessions and application restarts. It covers key concepts such as creating and managing AgentThreads with persistent storage, session management with user-specific threads, and conversation persistence to maintain state. Developers migrating from AutoGen, Semantic Kernel, or LangChain should reference this to learn effective patterns for chat history management and memory persistence within the new framework.",
      "tags": [
        "agent",
        "chat_client",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_responses_client",
      "category": "chat_client",
      "file_path": "python/samples/getting_started/chat_client/openai_responses_client.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/chat_client/openai_responses_client.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to directly use the OpenAIResponsesClient for generating structured responses using OpenAI models, including applying function calling capabilities with custom business logic. It illustrates asynchronous message handling and optional streaming of responses within the Agent Framework's chat client context. Developers migrating from AutoGen or Semantic Kernel will find this example valuable for understanding direct client interactions and incorporating custom tools or functions in their chat-based AI applications.",
      "tags": [
        "chat_client",
        "tools",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_ai_chat_client",
      "category": "chat_client",
      "file_path": "python/samples/getting_started/chat_client/azure_ai_chat_client.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/chat_client/azure_ai_chat_client.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the direct usage of the Azure AI Chat Client within the Agent Framework for building chat interactions with Azure AI models, showcasing integration of custom business logic through function calling. It illustrates asynchronous message handling, optional streaming responses, and leveraging Azure CLI credentials for authentication. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this sample useful for understanding how to implement chat clients with custom tools and asynchronous workflows in the Azure Agent Framework.",
      "tags": [
        "chat_client",
        "tools",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_chat_client",
      "category": "chat_client",
      "file_path": "python/samples/getting_started/chat_client/azure_chat_client.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/chat_client/azure_chat_client.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to use the AzureOpenAIChatClient from the Agent Framework for direct chat interactions with Azure OpenAI models, emphasizing function calling by integrating custom business logic such as a weather retrieval function. It showcases both streaming and non-streaming chat response methods, illustrating practical usage for real-time and batch-style conversational scenarios. Developers migrating from AutoGen, Semantic Kernel, or LangChain will find this example useful for understanding how to implement chat clients with Azure authentication and extend chat functionality with custom tool integrations.",
      "tags": [
        "chat_client",
        "beginner",
        "autogen_migration",
        "streaming"
      ]
    },
    {
      "name": "openai_assistants_client",
      "category": "chat_client",
      "file_path": "python/samples/getting_started/chat_client/openai_assistants_client.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/chat_client/openai_assistants_client.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates direct usage of the OpenAIAssistantsClient for asynchronous chat interactions, including function calling capabilities and automatic assistant creation. It covers key Agent Framework concepts such as integrating custom tool functions within chat prompts and managing both streaming and non-streaming responses. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this example to understand how to replace their previous chat client patterns with the new OpenAIAssistantsClient approach for streamlined assistant interactions.",
      "tags": [
        "chat_client",
        "tools",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_responses_client",
      "category": "chat_client",
      "file_path": "python/samples/getting_started/chat_client/azure_responses_client.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/chat_client/azure_responses_client.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates the use of AzureOpenAIResponsesClient from the Agent Framework to generate structured chat responses enriched with function calling capabilities. It highlights integrating custom business logic, such as a weather information tool, and showcases both streaming and non-streaming response handling with strongly typed output using Pydantic models. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this sample to understand how to leverage direct Azure OpenAI clients for advanced structured interactions and tool integration within the new Agent Framework.",
      "tags": [
        "chat_client",
        "beginner",
        "autogen_migration",
        "structured_output"
      ]
    },
    {
      "name": "azure_assistants_client",
      "category": "chat_client",
      "file_path": "python/samples/getting_started/chat_client/azure_assistants_client.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/chat_client/azure_assistants_client.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates direct usage of the AzureOpenAIAssistantsClient to conduct chat interactions with Azure OpenAI assistants, including function calling capabilities for dynamic information retrieval like weather updates. It highlights key Agent Framework concepts such as asynchronous communication, tool integration, and managing streaming versus non-streaming responses. Developers migrating from AutoGen, Semantic Kernel, or LangChain will find this example useful for understanding how to invoke Azure assistants directly within chat clients while leveraging built-in tools and authentication mechanisms.",
      "tags": [
        "chat_client",
        "beginner",
        "autogen_migration",
        "streaming"
      ]
    },
    {
      "name": "chat_response_cancellation",
      "category": "chat_client",
      "file_path": "python/samples/getting_started/chat_client/chat_response_cancellation.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/chat_client/chat_response_cancellation.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to properly cancel a streaming chat response using asyncio in the Agent Framework's OpenAIChatClient. It covers key concepts such as asynchronous task creation, cancellation, and resource cleanup when interacting with chat services. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this example to understand effective task cancellation patterns and error handling in streaming chat scenarios.",
      "tags": [
        "chat_client",
        "streaming",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_chat_client",
      "category": "chat_client",
      "file_path": "python/samples/getting_started/chat_client/openai_chat_client.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/chat_client/openai_chat_client.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the direct usage of the OpenAIChatClient within the Agent Framework to perform chat-based interactions, including streaming responses and function calling for custom business logic (e.g., fetching simulated weather data). It highlights key concepts such as asynchronous message handling, tool integration via function annotations, and streaming response processing. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can use this as a reference for adapting chat client usage patterns and integrating custom tools seamlessly in the new Agent Framework.",
      "tags": [
        "chat_client",
        "beginner",
        "autogen_migration",
        "streaming"
      ]
    },
    {
      "name": "red_team_agent_sample",
      "category": "evaluation",
      "file_path": "python/samples/getting_started/evaluation/azure_ai_foundry/red_team_agent_sample.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/evaluation/azure_ai_foundry/red_team_agent_sample.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to conduct red team evaluations using Azure AI Evaluation's RedTeam functionality integrated with the Agent Framework. It highlights key concepts such as creating an Azure OpenAI agent with specific instructions, implementing asynchronous callbacks between the RedTeam tool and the agent for adversarial prompt testing, and configuring multiple attack strategies to assess agent robustness against safety risks. Developers migrating from AutoGen, Semantic Kernel, or LangChain should reference this sample to understand how to leverage Azure AI's RedTeam for adversarial safety testing and resilience evaluation within the Agent Framework environment.",
      "tags": [
        "agent",
        "advanced",
        "autogen_migration",
        "evaluation"
      ]
    },
    {
      "name": "redis_threads",
      "category": "context_providers",
      "file_path": "python/samples/getting_started/context_providers/redis/redis_threads.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/context_providers/redis/redis_threads.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to manage conversational memory scoping using the Redis context provider within the Agent Framework. It covers key concepts such as global thread scope for shared memory across conversations, per-operation thread scope for isolated memories, and using multiple agent identities to isolate memory per persona. Developers migrating from frameworks like AutoGen or Semantic Kernel should reference this to understand memory isolation techniques and thread scoping for stateful agent interactions using Redis backend.",
      "tags": [
        "agent",
        "context_providers",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "redis_basics",
      "category": "context_providers",
      "file_path": "python/samples/getting_started/context_providers/redis/redis_basics.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/context_providers/redis/redis_basics.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the use of the Redis context provider within the Agent Framework to persist and retrieve conversational memory across multiple scenarios, including standalone usage, agent integration, and tool memory incorporation. It highlights key concepts such as message threading, vector-based hybrid search, and multi-tenant data scoping through Redis, enabling rich agent memory capabilities. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this example essential for understanding robust, scalable memory management and retrieval within conversational AI agents using Redis as a backend.",
      "tags": [
        "agent",
        "context_providers",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "redis_conversation",
      "category": "context_providers",
      "file_path": "python/samples/getting_started/context_providers/redis/redis_conversation.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/context_providers/redis/redis_conversation.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates integrating Redis as a context provider and persistent chat message store within the Agent Framework, enabling agents to store, retrieve, and utilize conversational history efficiently. It showcases using Redis with RediSearch and embedding-based vector search to maintain dynamic context across interactions. Developers migrating from frameworks like AutoGen or Semantic Kernel will find this useful for implementing durable, scalable conversational memory and context management using Redis technology.",
      "tags": [
        "agent",
        "context_providers",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "mem0_threads",
      "category": "context_providers",
      "file_path": "python/samples/getting_started/context_providers/mem0/mem0_threads.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/context_providers/mem0/mem0_threads.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates usage of the Mem0Provider within Azure AI Agent Framework to manage conversational memory scopes across multiple threads and agents. It covers key concepts like global thread-scoped memory sharing, per-operation thread-scoped memory isolation, and running multiple agents with distinct memory contexts. Developers migrating from frameworks such as AutoGen or Semantic Kernel will find this example valuable for understanding how to control memory isolation and sharing in multi-threaded conversational scenarios using the new provider model.",
      "tags": [
        "agent",
        "context_providers",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "mem0_basic",
      "category": "context_providers",
      "file_path": "python/samples/getting_started/context_providers/mem0/mem0_basic.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/context_providers/mem0/mem0_basic.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to use the Mem0 context provider within the Agent Framework to maintain and recall user-specific context across conversations and threads. It highlights key concepts such as associating memory records with user IDs and leveraging Azure authentication to create an intelligent agent capable of invoking tools based on remembered preferences. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this example valuable for understanding how to implement persistent context management and memory integration in a scalable and flexible way.",
      "tags": [
        "agent",
        "beginner",
        "semantic_kernel_migration",
        "context_providers"
      ]
    },
    {
      "name": "mem0_oss",
      "category": "context_providers",
      "file_path": "python/samples/getting_started/context_providers/mem0/mem0_oss.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/context_providers/mem0/mem0_oss.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the integration of the Mem0 open-source context provider with the Agent Framework's Azure AI agent. It showcases how to manage personalized conversational memory by associating user IDs with Mem0 storage, enabling agents to remember user preferences and context across different chat threads. Developers migrating from AutoGen or similar frameworks can reference this sample for implementing stateful memory management with async operations, Azure authentication, and tool invocation within conversational agents.",
      "tags": [
        "agent",
        "context_providers",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_responses_client_image_analysis",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_openai/azure_responses_client_image_analysis.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_openai/azure_responses_client_image_analysis.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to create and use an AzureOpenAIResponsesClient agent with vision capabilities to perform image analysis by combining text and image inputs in multi-modal chat messages. It covers key Agent Framework concepts such as creating agents with instructions, constructing chat messages with mixed content types, and asynchronously handling responses from the agent. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this to understand implementing multi-modal interactions and integrating Azure OpenAI vision features within the Agent Framework.",
      "tags": [
        "agent",
        "multimodal",
        "azure_openai",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_responses_client_basic",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_openai/azure_responses_client_basic.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_openai/azure_responses_client_basic.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the basic usage of the AzureOpenAIResponsesClient within the Agent Framework to create conversational agents capable of structured response generation both in streaming and non-streaming modes. It highlights key concepts such as agent creation with custom instructions and tool integrations for task-specific queries. Developers migrating from other frameworks like AutoGen, Semantic Kernel, or LangChain can reference this sample to understand how to implement and handle asynchronous agent interactions, particularly focusing on Azure OpenAI client integration and streaming capabilities.",
      "tags": [
        "agent",
        "beginner",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_chat_client_basic",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_openai/azure_chat_client_basic.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_openai/azure_chat_client_basic.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to use the AzureOpenAIChatClient to create an agent capable of handling both streaming and non-streaming chat interactions. It covers key concepts such as agent creation with custom instructions and integrating simple tools for domain-specific tasks, here exemplified by a weather function. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this to understand basic agent setup, Azure-based authentication, and leveraging streaming responses within the Agent Framework.",
      "tags": [
        "agent",
        "chat_client",
        "streaming",
        "beginner"
      ]
    },
    {
      "name": "azure_assistants_with_code_interpreter",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_openai/azure_assistants_with_code_interpreter.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_openai/azure_assistants_with_code_interpreter.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to integrate the HostedCodeInterpreterTool within an Azure OpenAI Assistants agent to execute and generate Python code dynamically in response to user queries. It highlights key Agent Framework concepts including asynchronous streaming of agent responses, tool integration for code execution, and parsing complex response structures to extract code interpreter outputs. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this example to implement advanced agent-tool collaboration and streaming capabilities in their Azure OpenAI-based assistants.",
      "tags": [
        "agent",
        "tools",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_assistants_with_existing_assistant",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_openai/azure_assistants_with_existing_assistant.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_openai/azure_assistants_with_existing_assistant.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to interact with pre-existing Azure OpenAI Assistants by leveraging their assistant IDs, rather than creating new instances. It showcases the use of the ChatAgent from the Agent Framework in combination with Azure OpenAI's async client, highlighting concepts such as integrating custom tools (a simple weather function) and managing assistant lifecycle programmatically. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this useful for understanding how to maintain and use persistent assistants with Azure-specific authentication and capabilities in an asynchronous context.",
      "tags": [
        "agent",
        "chat_client",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_responses_client_with_local_mcp",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_openai/azure_responses_client_with_local_mcp.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_openai/azure_responses_client_with_local_mcp.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to integrate an Azure OpenAI Responses Client with a local Model Context Protocol (MCP) server using the Microsoft Agent Framework. It covers key concepts such as creating a chat agent with Azure identity authentication, connecting to local MCP tools via streaming HTTP, and running conversational queries that utilize these tools. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this example when implementing advanced agent-tool integrations with Azure OpenAI Responses and local MCP servers to enable enhanced context-aware conversational agents.",
      "tags": [
        "agent",
        "tools",
        "azure_openai",
        "streaming"
      ]
    },
    {
      "name": "azure_chat_client_with_function_tools",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_openai/azure_chat_client_with_function_tools.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_openai/azure_chat_client_with_function_tools.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to integrate function tools with the Azure OpenAI Chat Client in the Agent Framework, showcasing both agent-level and query-level tool configurations. It exemplifies how to define reusable tools for weather and time information and use them flexibly either when initializing the agent or dynamically per query. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this sample useful for understanding tool integration patterns and managing tool invocation within conversational agents using the Agent Framework.",
      "tags": [
        "agent",
        "tools",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_responses_client_with_explicit_settings",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_openai/azure_responses_client_with_explicit_settings.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_openai/azure_responses_client_with_explicit_settings.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to create and configure an Azure OpenAI Responses Client explicitly by setting deployment name, endpoint, and credential rather than relying on environment defaults. It covers key Agent Framework concepts such as agent creation with custom instructions and tool integration to respond to user queries asynchronously. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this to understand explicit client configuration and how to integrate custom tools for enhanced control over agent behavior.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "tools"
      ]
    },
    {
      "name": "azure_assistants_basic",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_openai/azure_assistants_basic.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_openai/azure_assistants_basic.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the basic usage of the AzureOpenAIAssistantsClient to create and manage an assistant lifecycle automatically, showcasing both streaming and non-streaming response handling. It covers key Agent Framework concepts such as asynchronous agent creation, tool integration via Python functions, and managing conversation flow with streaming output support. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this sample essential for understanding how to implement basic chat agents with built-in lifecycle management and streaming capabilities in the Azure OpenAI Assistants SDK.",
      "tags": [
        "agent",
        "beginner",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_assistants_with_function_tools",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_openai/azure_assistants_with_function_tools.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_openai/azure_assistants_with_function_tools.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to integrate and configure function tools with Azure OpenAI Assistants using the Agent Framework. It covers key concepts such as defining tools at the agent creation level versus passing them dynamically per query, showcasing flexibility in tool management to enhance the assistant's capabilities. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this example valuable for understanding how to leverage tool invocation patterns within the Azure agent ecosystem to handle diverse query requirements effectively.",
      "tags": [
        "agent",
        "tools",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_assistants_with_thread",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_openai/azure_assistants_with_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_openai/azure_assistants_with_thread.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to manage conversational threads with Azure OpenAI Assistants using the Agent Framework. It covers key concepts such as automatic thread creation, explicit thread persistence across multiple interactions, and continuing conversations with existing thread IDs to maintain context. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this to implement robust thread and context management in chat-based agent applications.",
      "tags": [
        "agent",
        "chat_client",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_responses_client_with_thread",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_openai/azure_responses_client_with_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_openai/azure_responses_client_with_thread.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates managing conversation threads using the Azure OpenAI Responses Client within the Agent Framework, covering scenarios of automatic thread creation, explicit in-memory thread persistence, and continuation with existing thread IDs supported by Azure OpenAI's conversation state. It highlights how to maintain conversational context across multiple interactions by leveraging AgentThread objects and thread IDs, a key concept for building stateful chat agents. Developers migrating from frameworks like AutoGen or Semantic Kernel will find this essential for implementing persistent conversations and understanding thread management patterns in Azure-based agent architectures.",
      "tags": [
        "agent",
        "chat_client",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_chat_client_with_thread",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_openai/azure_chat_client_with_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_openai/azure_chat_client_with_thread.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to manage conversation threads using the Azure OpenAI Chat Client within the Microsoft Agent Framework. It covers key concepts such as automatic thread creation, explicit thread persistence across multiple conversations for maintaining context, and leveraging existing thread messages to continue or create new threads. Developers migrating from frameworks like AutoGen or Semantic Kernel will find this essential for understanding thread management patterns and ensuring conversational context continuity in Azure-based chat agents.",
      "tags": [
        "agent",
        "chat_client",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_assistants_with_explicit_settings",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_openai/azure_assistants_with_explicit_settings.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_openai/azure_assistants_with_explicit_settings.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to create and use Azure OpenAI Assistants with explicit configuration settings, bypassing the reliance on environment variable defaults. It highlights key Agent Framework concepts including agent creation with custom instructions and tool integration, asynchronous agent execution, and explicit credential management using AzureCliCredential. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this sample to understand how to instantiate and configure agents explicitly within the Azure OpenAI context for greater control over deployment and authentication.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "azure_openai"
      ]
    },
    {
      "name": "azure_responses_client_with_code_interpreter",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_openai/azure_responses_client_with_code_interpreter.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_openai/azure_responses_client_with_code_interpreter.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to build an Azure OpenAI based chat agent that integrates the HostedCodeInterpreterTool for executing Python code dynamically to solve problems, such as calculating a factorial. It highlights key Agent Framework concepts including usage of AzureOpenAIResponsesClient for chat client integration, tool-based code execution, and detailed response parsing for structured output handling. Developers migrating from frameworks like AutoGen or Semantic Kernel will find value in this example as it shows how to leverage Azure OpenAI's responses client combined with code interpreter tooling to enable interactive code generation and execution within an agent environment.",
      "tags": [
        "agent",
        "tools",
        "advanced",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_responses_client_with_function_tools",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_openai/azure_responses_client_with_function_tools.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_openai/azure_responses_client_with_function_tools.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to integrate function tools at both the agent creation and query execution levels using the Azure OpenAI Responses Client within the Agent Framework. It covers key concepts like defining reusable tools, configuring them at the agent level for persistent availability, and supplying them dynamically per query, illustrating flexible tool usage patterns. Developers migrating from AutoGen, Semantic Kernel, or LangChain frameworks can reference this sample to implement similar tool-based extensibility and manage contextual tool invocation in their agents.",
      "tags": [
        "agent",
        "tools",
        "azure_openai_responses_client",
        "intermediate"
      ]
    },
    {
      "name": "azure_chat_client_with_explicit_settings",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_openai/azure_chat_client_with_explicit_settings.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_openai/azure_chat_client_with_explicit_settings.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to configure and use the Azure OpenAI Chat Client with explicit settings, including custom deployment names, endpoints, and authentication via Azure CLI credentials. It highlights key Agent Framework concepts such as creating an agent with tailored instructions and integrating synchronous tools for domain-specific tasks like weather reporting. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this example when they need fine-grained control over client configuration and authentication, ensuring seamless adaptation to the Azure OpenAI ecosystem.",
      "tags": [
        "agent",
        "chat_client",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "agent_with_a2a",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/a2a/agent_with_a2a.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/a2a/agent_with_a2a.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates integrating the Agent Framework with the Agent2Agent (A2A) protocol to enable communication between heterogeneous agent systems. Key concepts include resolving external agents via their AgentCard, creating A2AAgent instances, and converting messages to and from the A2A protocol. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this sample to implement standardized, interoperable agent-to-agent communication within their applications.",
      "tags": [
        "agent",
        "intermediate",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "azure_ai_with_bing_grounding",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_ai/azure_ai_with_bing_grounding.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_ai/azure_ai_with_bing_grounding.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to implement an Azure AI agent using the Agent Framework that leverages Bing Grounding Search to retrieve real-time web information. It covers key concepts such as integrating external web search tools, asynchronous agent client usage, and instruction-driven agent behavior to provide accurate, source-cited responses. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this for patterns on connecting Azure AI agents with live web data sources for enhanced, up-to-date conversational AI functionalities.",
      "tags": [
        "agent",
        "tools",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_ai_with_function_tools",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_ai/azure_ai_with_function_tools.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_ai/azure_ai_with_function_tools.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to integrate function tools with Azure AI Agents in the Agent Framework, showcasing both agent-level and run-level tool configuration patterns. It covers key concepts such as asynchronous agent usage, tool registration during agent initialization, and dynamic tool provision during individual run calls. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this sample useful to understand how to adapt their custom tool integration and invocation strategies within the Agent Framework's model of agents and tools.",
      "tags": [
        "agent",
        "tools",
        "azure_ai",
        "intermediate"
      ]
    },
    {
      "name": "azure_ai_with_code_interpreter",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_ai/azure_ai_with_code_interpreter.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_ai/azure_ai_with_code_interpreter.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to integrate and use the HostedCodeInterpreterTool within an Azure AI Agent to execute Python code dynamically and solve mathematical problems, showcasing real-time code interpretation and execution. It highlights essential Agent Framework concepts such as agent creation, tool integration, and streaming responses for interactive agent communication. Developers migrating from AutoGen, Semantic Kernel, or LangChain frameworks will find this sample valuable for understanding how to implement code execution capabilities and stream agent outputs within the Azure AI ecosystem.",
      "tags": [
        "agent",
        "tools",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_ai_with_azure_ai_search",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_ai/azure_ai_with_azure_ai_search.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_ai/azure_ai_with_azure_ai_search.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to build an Azure AI Agent that integrates Azure AI Search to query an indexed hotel database and answer user questions effectively. It showcases key Agent Framework concepts such as tool integration with HostedFileSearchTool, asynchronous agent client management, and streaming conversational responses. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this to understand how to implement search-based tools within an Azure AI Agent for enhanced information retrieval and conversational capabilities.",
      "tags": [
        "agent",
        "tools",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_ai_with_hosted_mcp",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_ai/azure_ai_with_hosted_mcp.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_ai/azure_ai_with_hosted_mcp.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to integrate an Azure AI Agent with a hosted Model Context Protocol (MCP) tool, including handling user approval workflows for secure function calls. It highlights key Agent Framework concepts such as agent creation, threading, and interactive function call validation with user input. Developers migrating from frameworks like AutoGen or Semantic Kernel can reference this example to adopt structured user-in-the-loop approval patterns and connect Azure AI agents with hosted external tools securely.",
      "tags": [
        "agent",
        "tools",
        "human_in_loop",
        "azure_ai"
      ]
    },
    {
      "name": "azure_ai_basic",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_ai/azure_ai_basic.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_ai/azure_ai_basic.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to use the AzureAIAgentClient to create and manage AI agents in an asynchronous Python environment. It covers key Agent Framework concepts such as automatic agent lifecycle management and shows both non-streaming and streaming response handling using function tools. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this to understand how to implement basic agent interactions and leverage Azure authentication with streaming capabilities.",
      "tags": [
        "agent",
        "beginner",
        "streaming",
        "azure_ai"
      ]
    },
    {
      "name": "azure_ai_with_existing_agent",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_ai/azure_ai_with_existing_agent.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_ai/azure_ai_with_existing_agent.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to work with pre-existing Azure AI Agents in the Agent Framework by reusing existing agent IDs and combining both persistent remote instructions with local session-specific instructions. It covers key concepts such as creating and deleting agents via the Azure AI Project client, managing agent lifecycle, and customizing agent behavior with layered instructions to tailor chat responses. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this example to understand how to efficiently manage Azure AI Agents in production scenarios, enabling reuse and instruction merging for consistent chat experiences.",
      "tags": [
        "agent",
        "chat_client",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_ai_with_explicit_settings",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_ai/azure_ai_with_explicit_settings.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_ai/azure_ai_with_explicit_settings.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to create and use an Azure AI Chat Agent with explicit configuration settings, bypassing reliance on environment variable defaults. It highlights key Agent Framework concepts such as initializing Azure AI clients with explicit credentials, using asynchronous context management for agent lifecycle, and integrating custom tools like a weather function. Developers migrating from other frameworks like AutoGen or Semantic Kernel should reference this to understand configuring Azure AI agents with explicit settings and managing them asynchronously within the new Agent Framework.",
      "tags": [
        "agent",
        "chat_client",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_ai_with_multiple_tools",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_ai/azure_ai_with_multiple_tools.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_ai/azure_ai_with_multiple_tools.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to create an Azure AI Agent that integrates multiple tools, including Microsoft Learn MCP and Bing Web Search, with user approval workflows for function call security. It covers key Agent Framework concepts such as tool hosting, agent threading, asynchronous execution, and user interaction management for function call approvals within a conversation thread. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this example to understand how to orchestrate multi-tool Azure AI Agents with secure user-driven invocation and observability setup.",
      "tags": [
        "agent",
        "tools",
        "human_in_loop",
        "azure_ai"
      ]
    },
    {
      "name": "azure_ai_with_openapi_tools",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_ai/azure_ai_with_openapi_tools.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_ai/azure_ai_with_openapi_tools.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to build an Azure AI Agent that integrates OpenAPI-based tools to answer user queries about countries and weather information. It highlights key Agent Framework concepts such as creating and using OpenAPI tools directly with Azure AI's OpenApiTool, managing asynchronous context with AzureAIAgentClient, and maintaining conversation context via agent threads. Developers migrating from frameworks like AutoGen or Semantic Kernel can use this to understand how to incorporate OpenAPI tools within chat agents, especially when native wrappers for such tools are not yet available in the Agent Framework.",
      "tags": [
        "agent",
        "tools",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_ai_with_thread",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_ai/azure_ai_with_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_ai/azure_ai_with_thread.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to manage conversational threads with Azure AI Agents within the Agent Framework, highlighting differences between automatic thread creation, explicit thread persistence, and continuation with an existing thread ID. It covers key concepts such as thread lifecycle management, maintaining context across multiple interactions, and leveraging Azure authentication with asynchronous programming. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this example critical for understanding how to handle conversation state and context efficiently in Azure AI agent scenarios.",
      "tags": [
        "agent",
        "chat_client",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_ai_with_file_search",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_ai/azure_ai_with_file_search.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_ai/azure_ai_with_file_search.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to build an Azure AI agent leveraging the Agent Framework to integrate file search capabilities by uploading documents and creating vector stores for semantic search. It showcases key concepts such as asynchronous initialization, embedding HostedFileSearchTool as a tool, and managing lifecycle cleanup of vector stores and files. Developers migrating from AutoGen, Semantic Kernel, or LangChain should reference this for guidance on incorporating document-based search tools into an agent conversational workflow within the Azure AI environment.",
      "tags": [
        "agent",
        "tools",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_ai_with_local_mcp",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_ai/azure_ai_with_local_mcp.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_ai/azure_ai_with_local_mcp.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to integrate Azure AI Agents with a local Model Context Protocol (MCP) server, showcasing two patterns for tool configuration: defining tools at the agent creation level and providing tools dynamically when running queries. It covers key concepts of tool management within the Agent Framework, including context management and asynchronous operations with Azure credentials. Developers migrating from AutoGen or Semantic Kernel will find this example valuable for understanding how to efficiently incorporate external tools (like MCP servers) into Azure AI Agents workflows.",
      "tags": [
        "agent",
        "tools",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_ai_with_existing_thread",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_ai/azure_ai_with_existing_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_ai/azure_ai_with_existing_thread.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to use the Azure AI Agent Framework to interact with existing conversation threads by reusing thread IDs, a critical feature for maintaining persistent chat contexts. It covers key concepts such as initializing a chat agent with Azure AI services, managing threads manually, and integrating custom tools within the agent environment. Developers migrating from other frameworks like AutoGen or Semantic Kernel will find this example useful for understanding how to maintain conversational continuity and thread management using the Azure AI ecosystem.",
      "tags": [
        "agent",
        "chat_client",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "anthropic_with_openai_chat_client",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/anthropic/anthropic_with_openai_chat_client.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/anthropic/anthropic_with_openai_chat_client.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to use the Agent Framework's OpenAIChatClient configured with Anthropic's API to create an agent capable of handling weather queries. It covers key concepts such as agent creation, tool integration, and handling both streaming and non-streaming responses, showcasing flexible interaction patterns with chat-based AI models. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this useful for understanding cross-provider compatibility and streaming capabilities within the Agent Framework.",
      "tags": [
        "agent",
        "chat_client",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "ollama_with_openai_chat_client",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/ollama/ollama_with_openai_chat_client.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/ollama/ollama_with_openai_chat_client.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to integrate Ollama local language models with the OpenAIChatClient in the Agent Framework, enabling local AI inference by configuring a custom base URL. It covers key concepts such as agent creation with custom tools, handling both streaming and non-streaming responses, and performing asynchronous agent execution. Developers migrating from legacy frameworks like AutoGen, Semantic Kernel, or LangChain can reference this sample to understand how to adapt their local or custom model setups to the modern Agent Framework using OpenAI-compatible clients and agent abstractions.",
      "tags": [
        "agent",
        "chat_client",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "custom_agent",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/custom/custom_agent.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/custom/custom_agent.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the implementation of a custom agent by extending the BaseAgent class within the Agent Framework. It covers essential concepts such as handling both streaming and non-streaming responses, normalizing input messages, and interacting with conversation threads through asynchronous methods. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this example to understand how to build fully custom agents that integrate seamlessly with the new Agent Framework's architecture and capabilities, especially regarding custom response generation and streaming support.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "streaming"
      ]
    },
    {
      "name": "custom_chat_client",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/custom/custom_chat_client.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/custom/custom_chat_client.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates creating a custom chat client by extending the BaseChatClient class, integrating it with ChatAgent to handle both streaming and non-streaming chat responses. It covers key Agent Framework concepts such as custom client implementation, middleware usage, function invocation enhancements, and streaming response handling. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this example when they need to implement tailored chat client behavior while leveraging the extensibility and streaming capabilities of the Agent Framework.",
      "tags": [
        "agent",
        "chat_client",
        "streaming",
        "intermediate"
      ]
    },
    {
      "name": "copilotstudio_with_explicit_settings",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/copilotstudio/copilotstudio_with_explicit_settings.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/copilotstudio/copilotstudio_with_explicit_settings.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to explicitly configure the CopilotStudioAgent using manual token acquisition and custom ConnectionSettings, providing flexibility for production environment setups. It covers key Agent Framework concepts such as authentication, cloud environment selection, and agent instantiation with explicit parameters, showcasing how to run simple user queries asynchronously. Developers migrating from other frameworks like AutoGen, Semantic Kernel, or LangChain will find this sample useful for understanding explicit agent configuration, token management, and cloud-specific settings to adapt their integration workflows accordingly.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "copilotstudio_basic",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/copilotstudio/copilotstudio_basic.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/copilotstudio/copilotstudio_basic.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the basic usage of the CopilotStudioAgent within the Agent Framework, showcasing how to configure the agent via environment variables and handle both streaming and non-streaming conversational responses. It highlights key concepts such as asynchronous agent invocation, streaming results consumption, and environment-based configuration, offering a practical guide to integrating Copilot Studio agents in Python applications. Developers migrating from AutoGen, Semantic Kernel, or LangChain will find this example useful for understanding how to adapt their conversational agent workflows to the Agent Framework's asynchronous and streaming paradigms.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "streaming"
      ]
    },
    {
      "name": "openai_chat_client_with_explicit_settings",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/openai/openai_chat_client_with_explicit_settings.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/openai/openai_chat_client_with_explicit_settings.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to explicitly configure the OpenAIChatClient within the Agent Framework by specifying model ID and API key directly, avoiding reliance on environment variable defaults. It covers fundamental concepts like agent creation, tool integration, and asynchronous execution for chat-based interactions. Developers migrating from AutoGen, Semantic Kernel, or LangChain will find this useful for understanding how to set up and run an agent with explicit connection settings in the new Agent Framework.",
      "tags": [
        "agent",
        "chat_client",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_assistants_with_explicit_settings",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/openai/openai_assistants_with_explicit_settings.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/openai/openai_assistants_with_explicit_settings.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to create and configure OpenAI Assistants explicitly using the Agent Framework, bypassing reliance on environment variables. It highlights key concepts such as explicit client configuration, defining custom tools (e.g., a weather function), and running conversational agents with tailored instructions. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this example valuable for understanding how to instantiate and customize OpenAI agents directly within the Agent Framework.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "tools"
      ]
    },
    {
      "name": "openai_chat_client_with_web_search",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/openai/openai_chat_client_with_web_search.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/openai/openai_chat_client_with_web_search.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to integrate the HostedWebSearchTool with the OpenAIChatClient to enable real-time web search capabilities within conversational AI applications. It covers key Agent Framework concepts such as tool integration, handling additional user context (e.g., location data), and managing streaming vs. non-streaming responses. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this example valuable for implementing dynamic, tool-augmented chat clients that can fetch up-to-date information during conversations.",
      "tags": [
        "agent",
        "chat_client",
        "tools",
        "beginner"
      ]
    },
    {
      "name": "openai_chat_client_basic",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/openai/openai_chat_client_basic.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/openai/openai_chat_client_basic.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the basic usage of the OpenAIChatClient within the Agent Framework for implementing chat-based agents that can handle both streaming and non-streaming responses. It highlights key concepts such as agent creation, instruction setting, and integrating tool functions to enhance agent capabilities. Developers migrating from AutoGen, Semantic Kernel, or LangChain will find this useful for understanding how to implement simple chat agents and leverage streaming features in the new framework environment.",
      "tags": [
        "agent",
        "chat_client",
        "beginner",
        "streaming"
      ]
    },
    {
      "name": "openai_responses_client_with_web_search",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/openai/openai_responses_client_with_web_search.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/openai/openai_responses_client_with_web_search.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to integrate the HostedWebSearchTool with the OpenAIResponsesClient to enable real-time web search capabilities within an agent framework. It highlights key concepts such as tool orchestration, asynchronous streaming versus non-streaming API calls, and contextual parameterization through additional properties like user location. Developers migrating from AutoGen, Semantic Kernel, or LangChain can reference this for examples on combining direct web search tools with LLM responses to enrich real-time information retrieval in their intelligent agents.",
      "tags": [
        "agent",
        "tools",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_responses_client_with_code_interpreter",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/openai/openai_responses_client_with_code_interpreter.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/openai/openai_responses_client_with_code_interpreter.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to integrate the HostedCodeInterpreterTool with the OpenAI Responses Client within the Agent Framework to execute Python code and solve mathematical problems dynamically. It highlights key concepts such as agent initialization with instructions, tool integration, asynchronous agent execution, and handling structured responses from the OpenAI client. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this example useful for understanding how to leverage agent tools in a unified manner for executing code within conversational agents.",
      "tags": [
        "agent",
        "tools",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_assistants_with_function_tools",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/openai/openai_assistants_with_function_tools.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/openai/openai_assistants_with_function_tools.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to integrate function tools with OpenAI Assistants using the Agent Framework, illustrating both agent-level and query-level tool configurations. It highlights key concepts such as defining reusable tools when creating an agent and dynamically injecting tools when processing individual queries, enabling flexible and context-aware assistant behaviors. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this sample to understand best practices for tool management and invocation within the ChatAgent model in scenarios requiring function tool interoperability.",
      "tags": [
        "agent",
        "tools",
        "openai_assistants",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_assistants_with_code_interpreter",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/openai/openai_assistants_with_code_interpreter.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/openai/openai_assistants_with_code_interpreter.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to integrate and utilize the HostedCodeInterpreterTool within the OpenAI Assistants framework to execute Python code dynamically and solve computational problems such as calculating factorials. It highlights key Agent Framework concepts including asynchronous agent execution, streaming partial responses, tool integration for code interpretation, and handling complex response deltas to extract code snippets for execution. Developers migrating from other frameworks like AutoGen, Semantic Kernel, or LangChain should reference this sample to understand combining chat-based agents with executable tools, enabling advanced interactive and computational capabilities within their AI-assisted applications.",
      "tags": [
        "agent",
        "tools",
        "advanced",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_responses_client_with_hosted_mcp",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/openai/openai_responses_client_with_hosted_mcp.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/openai/openai_responses_client_with_hosted_mcp.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to integrate Hosted Model Context Protocol (MCP) tools with OpenAI Responses Client within the Microsoft Agent Framework, focusing on user approval workflows for secure function call execution. It highlights handling user input requests with and without agent threads, including streaming responses, and managing approval modes for different tool operations. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this example valuable for implementing interactive, approval-based agent workflows using hosted external tools.",
      "tags": [
        "agent",
        "tools",
        "streaming",
        "human_in_loop"
      ]
    },
    {
      "name": "openai_assistants_with_thread",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/openai/openai_assistants_with_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/openai/openai_assistants_with_thread.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates effective thread management with the OpenAI Assistants using the Agent Framework, focusing on maintaining persistent conversation contexts across multiple interactions. It covers key concepts such as automatic thread creation, explicit thread persistence, and resuming conversations using existing service thread IDs. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this sample valuable for understanding how to manage conversation state and continuity within the Agent Framework's chat client paradigm.",
      "tags": [
        "agent",
        "chat_client",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_chat_client_with_thread",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/openai/openai_chat_client_with_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/openai/openai_chat_client_with_thread.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates managing conversation threads using the OpenAI Chat Client within the Agent Framework. It covers key concepts such as automatic versus explicit thread creation, preserving message history across multiple interactions, and reusing conversation context to maintain continuity. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this example valuable for understanding how to implement thread persistence and message state management in the new architecture.",
      "tags": [
        "agent",
        "chat_client",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_responses_client_with_function_tools",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/openai/openai_responses_client_with_function_tools.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/openai/openai_responses_client_with_function_tools.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates integration of function-based tools with the OpenAI Responses Client within the Agent Framework, highlighting both agent-level and per-query tool configurations. Key concepts covered include dynamic tool invocation at the agent creation phase versus runtime, enabling more flexible and context-aware conversational agents. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this example to understand how to implement and manage external tools seamlessly in Agent Framework agents for enhanced query handling.",
      "tags": [
        "agent",
        "tools",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_responses_client_with_explicit_settings",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/openai/openai_responses_client_with_explicit_settings.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/openai/openai_responses_client_with_explicit_settings.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to create and configure an OpenAI Responses Client agent with explicit setting parameters instead of relying on environment variables. It highlights the Agent Framework's flexibility in setting model IDs and API keys explicitly, and integrating simple tool functions within agents. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this example useful to understand direct client configuration and tool integration practices in the new Agent Framework.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "tools"
      ]
    },
    {
      "name": "openai_assistants_with_file_search",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/openai/openai_assistants_with_file_search.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/openai/openai_assistants_with_file_search.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to integrate OpenAI Assistants with the HostedFileSearchTool to perform document-based question answering using vector store search capabilities. It covers key Agent Framework concepts such as creating and managing vector stores, asynchronous agent execution, and streaming responses to enable efficient file-based knowledge retrieval. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this for practical guidance on implementing file search tools with OpenAI Assistants within an agent environment.",
      "tags": [
        "agent",
        "tools",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_responses_client_image_generation",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/openai/openai_responses_client_image_generation.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/openai/openai_responses_client_image_generation.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to utilize the OpenAI Responses Client within the Agent Framework to perform image generation using DALL-E models. It highlights key concepts such as creating an agent with custom tools for image generation, handling multimodal content types like DataContent and UriContent, and asynchronously invoking the agent to process queries and retrieve generated images. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this to understand how to build and interact with agents focused on multimodal capabilities, especially for image synthesis tasks within the new Agent Framework.",
      "tags": [
        "agent",
        "multimodal",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_responses_client_with_local_mcp",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/openai/openai_responses_client_with_local_mcp.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/openai/openai_responses_client_with_local_mcp.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to integrate local Model Context Protocol (MCP) tools directly into an OpenAI Responses Client-based ChatAgent within the Microsoft Agent Framework. It covers key concepts such as defining and using MCPStreamableHTTPTool as an agent-level tool, streaming responses with event detail access, and managing asynchronous agent lifecycle. Developers migrating from AutoGen, Semantic Kernel, or LangChain can refer to this to understand handling custom tool plugins and streaming interaction patterns in the Agent Framework.",
      "tags": [
        "agent",
        "tools",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_chat_client_with_local_mcp",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/openai/openai_chat_client_with_local_mcp.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/openai/openai_chat_client_with_local_mcp.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to integrate Model Context Protocol (MCP) tools with the OpenAI Chat Client within the Microsoft Agent Framework, illustrating two approaches: defining MCP tools at the agent creation level and at the run call level. It covers key Agent Framework concepts such as tool integration, agent lifecycle management with context managers, and asynchronous agent operations. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this sample valuable for understanding how to extend agent capabilities with external MCP tools to enable richer interactions and dynamic querying of external APIs.",
      "tags": [
        "agent",
        "tools",
        "chat_client",
        "intermediate"
      ]
    },
    {
      "name": "openai_responses_client_reasoning",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/openai/openai_responses_client_reasoning.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/openai/openai_responses_client_reasoning.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates advanced reasoning capabilities using the OpenAI Responses Client with the Agent Framework, specifically showing how to perform step-by-step reasoning and detailed problem-solving with a 'MathHelper' agent. It highlights key concepts such as creating agents with custom instructions, using provider-specific additional chat options to enable high-effort reasoning, and handling both standard and streaming agent responses with reasoning content types. Developers migrating from AutoGen, Semantic Kernel, or LangChain can reference this sample to understand how to implement sophisticated, explainable reasoning workflows and leverage detailed model responses within the Agent Framework environment.",
      "tags": [
        "agent",
        "advanced",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_chat_client_with_function_tools",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/openai/openai_chat_client_with_function_tools.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/openai/openai_chat_client_with_function_tools.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to integrate function-based tools with the OpenAI Chat Client using the Agent Framework, showcasing both agent-level and query-specific tool configurations. It highlights key concepts such as defining reusable tools, passing tools at agent creation versus dynamically per invocation, and leveraging these patterns to create versatile, context-aware chat agents. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this when adapting their multi-tool agents or when transitioning from static tool injection to more flexible, runtime tool assemblies.",
      "tags": [
        "agent",
        "tools",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_assistants_with_existing_assistant",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/openai/openai_assistants_with_existing_assistant.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/openai/openai_assistants_with_existing_assistant.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to interact with pre-existing OpenAI Assistants by leveraging existing assistant IDs instead of creating new ones each time. It highlights key Agent Framework concepts like using the OpenAIAssistantsClient with assistant persistence, integrating synchronous tools for task-specific operations (e.g., a weather tool), and managing assistant lifecycle including cleanup. Developers migrating from frameworks such as AutoGen, Semantic Kernel, or LangChain should reference this example when needing to maintain and interact with persistent assistant instances within their applications.",
      "tags": [
        "agent",
        "chat_client",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_responses_client_image_analysis",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/openai/openai_responses_client_image_analysis.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/openai/openai_responses_client_image_analysis.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to use the OpenAI Responses Client within the Agent Framework to analyze images by combining text and visual input. It showcases key concepts such as creating a vision-capable agent, composing multi-modal chat messages with text and image content, and asynchronously retrieving the agent's analytical responses. Developers migrating from other frameworks like AutoGen, Semantic Kernel, or LangChain will find this example useful for implementing multimodal agents with integrated image understanding capabilities.",
      "tags": [
        "agent",
        "multimodal",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_assistants_basic",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/openai/openai_assistants_basic.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/openai/openai_assistants_basic.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to use the OpenAIAssistantsClient in the Agent Framework to create and manage assistants automatically with both streaming and non-streaming response modes. It covers essential concepts such as agent lifecycle management, tool integration, and asynchronous interaction patterns. Developers migrating from AutoGen, Semantic Kernel, or LangChain frameworks can reference this to understand basic agent creation and usage patterns for building chat assistants with weather tool integration using OpenAI's client.",
      "tags": [
        "agent",
        "beginner",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_responses_client_with_thread",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/openai/openai_responses_client_with_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/openai/openai_responses_client_with_thread.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the management of conversation threads using the OpenAI Responses Client within the Agent Framework, highlighting persistence of conversation context both in-memory and via server-side thread IDs. Key concepts covered include automatic thread creation, maintaining conversation state across multiple interactions, and resuming conversations using existing thread IDs. Developers migrating from frameworks like AutoGen or LangChain can reference this example to understand how to implement persistent, context-aware conversational agents that manage threads explicitly or utilize service-side conversation state within the Agent Framework.",
      "tags": [
        "agent",
        "chat_client",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_responses_client_with_structured_output",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/openai/openai_responses_client_with_structured_output.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/openai/openai_responses_client_with_structured_output.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to use the OpenAI Responses Client within the Agent Framework to produce and parse structured outputs using Pydantic models, showcasing both non-streaming and streaming scenarios. It highlights key concepts such as creating agents with explicit instructions, leveraging type-safe structured response parsing, and managing streaming responses through the AgentRunResponse helper. Developers migrating from AutoGen, Semantic Kernel, or LangChain will find this sample useful to understand a strongly typed, structured output approach and integration of streamed agent responses within the new framework.",
      "tags": [
        "agent",
        "structured_output",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_responses_client_basic",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/openai/openai_responses_client_basic.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/openai/openai_responses_client_basic.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the basic usage of the OpenAIResponsesClient within the Agent Framework to generate both non-streaming and streaming structured responses. It highlights core concepts such as setting up a ChatAgent with instructions and tool functions, handling synchronous vs. asynchronous streaming outputs, and leveraging tools to augment responses with custom logic. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this to understand how to implement simple yet effective chat agents using the OpenAIResponsesClient for structured and streaming completion handling.",
      "tags": [
        "agent",
        "openai_responses_client",
        "beginner",
        "streaming"
      ]
    },
    {
      "name": "openai_responses_client_with_file_search",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/openai/openai_responses_client_with_file_search.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/openai/openai_responses_client_with_file_search.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to integrate the OpenAI Responses Client with a Hosted File Search Tool to enable direct document-based question answering within the Agent Framework. It covers key concepts such as creating and using vector stores for knowledge bases, handling file uploads, and invoking tools to augment responses. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this example crucial for implementing document search and retrieval capabilities seamlessly within an agent workflow.",
      "tags": [
        "agent",
        "tools",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "guessing_game_with_human_input",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/human-in-the-loop/guessing_game_with_human_input.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/human-in-the-loop/guessing_game_with_human_input.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates building a human-in-the-loop guessing game workflow using the Agent Framework, showcasing how to interleave AI agent actions with human feedback through the RequestInfoExecutor and correlated RequestResponse objects. It highlights key concepts such as structured JSON output enforcement via Pydantic models, event-driven turn management between agent and human, and streaming response handling. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this sample valuable for implementing interactive workflows that require pausing for human input within complex AI orchestration.",
      "tags": [
        "workflow",
        "human_in_loop",
        "structured_output",
        "intermediate"
      ]
    },
    {
      "name": "concurrent_with_visualization",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/visualization/concurrent_with_visualization.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/visualization/concurrent_with_visualization.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to implement a concurrent fan-out/fan-in workflow using the Agent Framework, distributing a prompt to multiple specialized domain agents (research, marketing, legal) and aggregating their responses into a consolidated output. It highlights key concepts such as custom Executors, asynchronous message dispatching, response aggregation, and workflow visualization using Mermaid and GraphViz. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this to understand concurrent workflow orchestration with clear separation of responsibilities, structured output aggregation, and advanced debugging via visualization features.",
      "tags": [
        "workflow",
        "fan_out",
        "advanced",
        "autogen_migration"
      ]
    },
    {
      "name": "fan_out_fan_in_edges",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/parallelism/fan_out_fan_in_edges.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/parallelism/fan_out_fan_in_edges.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates constructing a parallel fan-out and fan-in workflow pattern using the Agent Framework, where a user prompt is dispatched concurrently to multiple domain-specific agents and their individual responses are aggregated into a consolidated output. Key concepts covered include defining custom Executors, using WorkflowBuilder to create parallel branches, handling AgentExecutorRequest and AgentExecutorResponse objects, and leveraging workflow context for messaging and output. Developers migrating from AutoGen, Semantic Kernel, or LangChain should reference this example to understand how to implement and orchestrate parallel agent invocations and result aggregation within the Agent Framework's workflow model.",
      "tags": [
        "workflow",
        "agent",
        "parallel",
        "fan_out"
      ]
    },
    {
      "name": "map_reduce_and_visualization",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/parallelism/map_reduce_and_visualization.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/parallelism/map_reduce_and_visualization.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates building a parallel map-reduce workflow using the Agent Framework, highlighting the splitting of input data, parallel mapping, shuffling, and reducing phases with file-backed intermediate results to manage memory efficiently. It covers key concepts such as shared state management, fan-out and fan-in edges for expressing parallelism, event-driven coordination, and workflow visualization with WorkflowViz. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this to learn best practices for orchestrating complex parallel workflows with intermediate persistence and comprehensive visualization support.",
      "tags": [
        "workflow",
        "parallel",
        "advanced",
        "autogen_migration"
      ]
    },
    {
      "name": "aggregate_results_of_different_types",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/parallelism/aggregate_results_of_different_types.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/parallelism/aggregate_results_of_different_types.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates constructing a parallel workflow pattern using the Agent Framework to fan out a list of numbers to multiple executors performing different computations (average and sum), then fan in their results into an aggregator executor. It covers key concepts like WorkflowBuilder, executor definitions with handlers, fan out and fan in edge construction, and streaming workflow runs with output event handling. Developers migrating from other agent or workflow orchestration frameworks such as AutoGen, Semantic Kernel, or LangChain can use this sample to understand how to implement concurrent parallel task execution and result aggregation within the Agent Framework workflow system.",
      "tags": [
        "workflow",
        "parallel",
        "fan_out",
        "autogen_migration"
      ]
    },
    {
      "name": "sub_workflow_checkpoint",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/checkpoint/sub_workflow_checkpoint.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/checkpoint/sub_workflow_checkpoint.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to implement checkpointing in workflows that include nested sub-workflows using the Agent Framework's WorkflowExecutor. It highlights key concepts such as handling human-in-the-loop approval requests via RequestInfoExecutor, persisting complex checkpoints with FileCheckpointStorage, and resuming workflows based on stored state. Developers migrating from other orchestration or agent-based frameworks will find this example valuable for managing long-running workflows with human interactions and ensuring reliable resume capabilities.",
      "tags": [
        "workflow",
        "checkpoint",
        "human_in_loop",
        "autogen_migration"
      ]
    },
    {
      "name": "checkpoint_with_human_in_the_loop",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/checkpoint/checkpoint_with_human_in_the_loop.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/checkpoint/checkpoint_with_human_in_the_loop.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates implementing a checkpoint-enabled workflow with a human-in-the-loop approval process using the Agent Framework. It covers core concepts such as minimal executor pipelines, checkpoint persistence, and interactive pause/resume capabilities by pairing RequestInfoExecutor with checkpoint restoration and pre-supplied human responses. Developers migrating from AutoGen or Semantic Kernel will find this useful for incorporating human review steps and stateful workflow management into their AI agent pipelines.",
      "tags": [
        "workflow",
        "checkpoint",
        "human_in_loop",
        "intermediate"
      ]
    },
    {
      "name": "checkpoint_with_resume",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/checkpoint/checkpoint_with_resume.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/checkpoint/checkpoint_with_resume.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to implement checkpointing and resuming workflows using the Agent Framework, showcasing local and shared state persistence across executor stages including an LLM-backed AgentExecutor. Key concepts covered include state management with ctx.get_state and ctx.set_state, workflow checkpoint configuration with FileCheckpointStorage, and interactive resumption from saved checkpoints. Developers migrating from AutoGen or Semantic Kernel who require robust workflow state persistence, resumability, and observability should reference this sample for practical guidance on managing complex agents and workflow execution continuity.",
      "tags": [
        "workflow",
        "checkpoint",
        "observability",
        "autogen_migration"
      ]
    },
    {
      "name": "step2_agents_in_a_workflow",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/_start-here/step2_agents_in_a_workflow.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/_start-here/step2_agents_in_a_workflow.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates how to construct and execute a simple two-agent workflow using Microsoft's Agent Framework with Azure OpenAI chat capabilities. It showcases key concepts such as wrapping chat agents in workflow executors, defining execution edges, and handling non-streaming runs where agents yield outputs upon completion automatically. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this sample essential for understanding workflow orchestration patterns and how to seamlessly chain agent interactions within the new architecture.",
      "tags": [
        "workflow",
        "agent",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "step3_streaming",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/_start-here/step3_streaming.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/_start-here/step3_streaming.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates building a two-node streaming workflow using the Agent Framework, where a Writer agent generates content which is then reviewed and finalized by a Reviewer agent. It showcases key concepts including creating custom executors with attached chat agents, wiring executors with WorkflowBuilder via edges, the use of typed @handler methods for typed message inputs and outputs, and consuming streaming workflow events to observe run-state and data flow. Developers migrating from frameworks like AutoGen or Semantic Kernel will find this example valuable for understanding how to map agent orchestration patterns and real-time event streaming into the Agent Framework's idioms and APIs.",
      "tags": [
        "workflow",
        "streaming",
        "agent",
        "intermediate"
      ]
    },
    {
      "name": "step1_executors_and_edges",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/_start-here/step1_executors_and_edges.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/_start-here/step1_executors_and_edges.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates foundational workflow patterns in the Azure AI Agent Framework by defining executors as units of work using both subclassing and function decorators. It covers key concepts such as creating Executor nodes with custom handlers, composing workflows with the fluent WorkflowBuilder API, and running workflows that emit outputs and propagate messages through edges. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this to understand how to model operations as executors and build directed acyclic graphs for orchestrated task execution.",
      "tags": [
        "workflow",
        "beginner",
        "autogen_migration",
        "agent"
      ]
    },
    {
      "name": "azure_chat_agents_streaming",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/agents/azure_chat_agents_streaming.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/agents/azure_chat_agents_streaming.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates building and executing a streaming multi-agent workflow using AzureOpenAIChatClient within the Agent Framework. It covers key concepts such as creating specialized chat agents, wiring them into a WorkflowBuilder pipeline with incremental streaming updates via AgentRunUpdateEvent, emitting final responses, and connecting agents through workflow edges. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this example valuable for understanding how to implement streaming chat interactions, orchestrate agent cooperation, and handle real-time output events using the new Agent Framework.",
      "tags": [
        "agent",
        "workflow",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "workflow_as_agent_reflection_pattern",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/agents/workflow_as_agent_reflection_pattern.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/agents/workflow_as_agent_reflection_pattern.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to implement a cyclic reflection and retry pattern by wrapping a workflow as an agent using the Agent Framework's WorkflowAgent. It covers key concepts including the design of Worker and Reviewer executors for iterative response improvement, structured output parsing using Pydantic, state management for pending requests, and using AgentRunUpdateEvent to emit approved responses. Developers migrating from AutoGen, Semantic Kernel, or LangChain can reference this sample to understand how to orchestrate complex agent workflows with feedback loops and error handling in the new framework.",
      "tags": [
        "agent",
        "workflow",
        "reflection",
        "autogen_migration"
      ]
    },
    {
      "name": "custom_agent_executors",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/agents/custom_agent_executors.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/agents/custom_agent_executors.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates creating a custom multi-node workflow using the Azure OpenAI Chat client in the Agent Framework, featuring two distinct agents: a Writer that generates and edits content and a Reviewer that evaluates and finalizes output. It highlights key concepts such as attaching ChatAgents to Executors, using the @handler decorator with typed inputs and outputs, constructing workflows with WorkflowBuilder, and passing messages between executors non-streamingly. Developers migrating from platforms like AutoGen, Semantic Kernel, or LangChain can reference this to understand structured agent orchestration, custom executor design, and fluent workflow construction with typed message passing in the Agent Framework.",
      "tags": [
        "agent",
        "workflow",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_chat_agents_tool_calls_with_feedback",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/agents/azure_chat_agents_tool_calls_with_feedback.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/agents/azure_chat_agents_tool_calls_with_feedback.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates building a multi-agent workflow with human-in-the-loop feedback using the Azure OpenAI Chat client and the Agent Framework. It showcases how to attach Python function tools to an agent, capture the agent's draft output for human review via a custom request executor, and stream agent updates alongside human guidance integration before producing a polished final output. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this sample when implementing sophisticated tool-enabled agents that require iterative human feedback and collaboration within a seamless workflow.",
      "tags": [
        "agent",
        "workflow",
        "tools",
        "human_in_loop"
      ]
    },
    {
      "name": "workflow_as_agent_human_in_the_loop",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/agents/workflow_as_agent_human_in_the_loop.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/agents/workflow_as_agent_human_in_the_loop.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to construct a workflow agent that integrates a human-in-the-loop escalation mechanism within the Microsoft Agent Framework. It highlights key concepts such as WorkflowBuilder, Executors, and asynchronous message handling via RequestInfoExecutor to enable review and decision escalation to a human operator, ensuring uncertain decisions get human validation. Developers migrating from frameworks like AutoGen or LangChain looking to implement complex review patterns with human oversight should reference this for understanding human-in-the-loop workflows and bidirectional communication in Agents.",
      "tags": [
        "workflow",
        "agent",
        "human_in_loop",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_ai_agents_streaming",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/agents/azure_ai_agents_streaming.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/agents/azure_ai_agents_streaming.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to build a streaming workflow of Azure AI Agents where a Writer agent produces content that a Reviewer agent critiques, showcasing incremental token streaming using AgentRunUpdateEvent and emitting final outputs with WorkflowOutputEvent. It highlights key Agent Framework concepts such as WorkflowBuilder's add_agent method with streaming configurations, event-driven incremental updates, and agent chaining with directed edges. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this example essential for understanding how to implement interactive agent pipelines with real-time output streaming within the Azure AI ecosystem.",
      "tags": [
        "agent",
        "workflow",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_chat_agents_function_bridge",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/agents/azure_chat_agents_function_bridge.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/agents/azure_chat_agents_function_bridge.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates building a workflow that connects multiple agents via a function executor bridge, enabling an agent to enrich a prior agent's response with external knowledge before finalizing the answer. It covers key Agent Framework concepts such as the @executor decorator for function-style workflow nodes, chained agent workflows with inter-agent messaging, and streaming real-time updates across the workflow. Developers migrating from AutoGen, Semantic Kernel, or LangChain will find this useful for implementing multi-agent collaboration patterns with external enrichment and streaming event handling in the Azure Agent Framework.",
      "tags": [
        "workflow",
        "agent",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "tracing_basics",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/observability/tracing_basics.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/observability/tracing_basics.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to implement basic tracing in an Agent Framework workflow by leveraging built-in OpenTelemetry spans for diagnostics. It covers fundamental concepts like workflow building with multiple executors, tracing span categories (workflow.build, workflow.run, executor.process, message.send), and observability setup through environment-based configuration. Developers migrating from frameworks like AutoGen or Semantic Kernel should reference this for integrating observability and tracing into their workflows to enable error diagnostics and performance monitoring.",
      "tags": [
        "workflow",
        "beginner",
        "autogen_migration",
        "observability"
      ]
    },
    {
      "name": "sub_workflow_parallel_requests",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/composition/sub_workflow_parallel_requests.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/composition/sub_workflow_parallel_requests.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to create a sub-workflow that issues parallel requests of different types (resource allocation and policy checks) and how those requests are handled by specialized parent executors using typed @handler methods. It highlights key Agent Framework concepts such as workflow composition, type-based request routing via specialized interceptors, and fallback forwarding for unhandled requests. Developers migrating from frameworks like AutoGen or Semantic Kernel should reference this example to understand implementing parallel handling of heterogeneous requests within composed workflows using typed message handling and executor coordination.",
      "tags": [
        "workflow",
        "advanced",
        "autogen_migration",
        "parallel"
      ]
    },
    {
      "name": "sub_workflow_basics",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/composition/sub_workflow_basics.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/composition/sub_workflow_basics.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the use of sub-workflows within the Microsoft Agent Framework, showcasing how a parent workflow can invoke and coordinate multiple sub-workflows to process text inputs concurrently. Key concepts include workflow composition, handling asynchronous task execution, and collecting results by yielding outputs and raising events. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this useful for learning how to structure modular, scalable workflows and manage inter-workflow communication and event-driven completion in the Agent Framework.",
      "tags": [
        "workflow",
        "beginner",
        "autogen_migration",
        "fan_out"
      ]
    },
    {
      "name": "sub_workflow_request_interception",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/composition/sub_workflow_request_interception.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/composition/sub_workflow_request_interception.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to create workflows with nested sub-workflows and intercept their requests to optimize processing, showcasing domain-specific request handling and response correlation for concurrent email validation. It highlights key Agent Framework concepts such as WorkflowExecutor, request interception via @handler methods, forwarding external requests, and proper request/response correlation to support parallel processing. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this to implement advanced workflow composition patterns involving sub-workflows, request mediation, and external service simulation efficiently.",
      "tags": [
        "workflow",
        "advanced",
        "autogen_migration",
        "parallel"
      ]
    },
    {
      "name": "shared_states_with_agents",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/state-management/shared_states_with_agents.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/state-management/shared_states_with_agents.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates complex state management and conditional routing within the Agent Framework, using shared state to handle large data payloads efficiently and enforce structured agent responses with Pydantic models. It highlights advanced workflow orchestration by employing conditional edges and typed intermediate results to separate spam detection logic from email drafting, showcasing streamed event handling and function style executors. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this sample invaluable for implementing robust, scalable workflows that require decoupling of data, rigorous output validation, and detailed conditional routing based on agent outputs.",
      "tags": [
        "workflow",
        "advanced",
        "structured_output",
        "autogen_migration"
      ]
    },
    {
      "name": "simple_loop",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/control-flow/simple_loop.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/control-flow/simple_loop.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates creating a simple feedback loop workflow using the Agent Framework, where a guessing executor interacts with a judge agent to perform a binary search number guessing game. It highlights key concepts such as defining custom executors, stepwise message passing, agent integration with Azure OpenAI, and managing a looped control flow within a workflow. Developers migrating from frameworks like AutoGen or Semantic Kernel will find this useful for understanding structured workflows with iterative agent interactions and dynamic feedback handling.",
      "tags": [
        "workflow",
        "agent",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "sequential_executors",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/control-flow/sequential_executors.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/control-flow/sequential_executors.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates building a sequential workflow in the Agent Framework using custom Executor classes annotated with @handler methods to process text transformations step-by-step. It covers key concepts such as defining typed WorkflowContext for message passing, chaining executors with WorkflowBuilder, and consuming streaming workflow events including intermediate and terminal outputs. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this to understand explicit control flow orchestration, event streaming for observability, and structured output delivery in a sequential task pipeline.",
      "tags": [
        "workflow",
        "beginner",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "edge_condition",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/control-flow/edge_condition.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/control-flow/edge_condition.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates building a conditional routing workflow using the Agent Framework by classifying inbound emails as spam or not and routing them accordingly. It highlights key concepts such as edge conditions for gating workflow transitions, use of Pydantic models for structured JSON-based agent responses, and composing multiple agent executors in a decision pipeline. Developers migrating from frameworks like AutoGen or Semantic Kernel will find this useful for implementing controlled, type-safe branching logic and integrating structured data handling within workflows.",
      "tags": [
        "workflow",
        "agent",
        "structured_output",
        "intermediate"
      ]
    },
    {
      "name": "sequential_streaming",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/control-flow/sequential_streaming.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/control-flow/sequential_streaming.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to create a foundational sequential workflow using the Agent Framework with streaming event handling. It covers key concepts such as defining executor functions with the @executor decorator, passing intermediate messages through WorkflowContext, building a workflow graph using WorkflowBuilder, and streaming real-time execution events including ExecutorInvokedEvent and WorkflowOutputEvent for observability. Developers migrating from other frameworks like AutoGen, Semantic Kernel, or LangChain will find this example useful for understanding workflow orchestration, stepwise data passing, and real-time streaming output within the Agent Framework.",
      "tags": [
        "workflow",
        "beginner",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "switch_case_edge_group",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/control-flow/switch_case_edge_group.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/control-flow/switch_case_edge_group.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates advanced workflow control in the Agent Framework by implementing a switch-case edge group for routing based on spam detection results. It highlights key concepts like shared state management, structured output validation with Pydantic, deterministic routing via Case and Default edges, and clean separation of executor logic. Developers migrating from frameworks such as AutoGen, Semantic Kernel, or LangChain will find this sample valuable for understanding how to model conditional branching, persistent state handling, and typed message passing within Agent Framework workflows.",
      "tags": [
        "workflow",
        "advanced",
        "structured_output",
        "autogen_migration"
      ]
    },
    {
      "name": "multi_selection_edge_group",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/control-flow/multi_selection_edge_group.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/control-flow/multi_selection_edge_group.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to implement a multi-selection edge group in an Agent Framework workflow to triage and process emails by classifying them as spam, not spam, or uncertain, and routing to multiple branches accordingly. It highlights key concepts such as using shared workflow state, validating structured data with Pydantic models, merging results from parallel paths, and conditional persistence logic. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this to learn how to model complex branching workflows with fan-out patterns and robust state sharing.",
      "tags": [
        "workflow",
        "advanced",
        "fan_out",
        "structured_output"
      ]
    },
    {
      "name": "magentic_human_plan_update",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/orchestration/magentic_human_plan_update.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/orchestration/magentic_human_plan_update.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to build and orchestrate a Magentic workflow integrating multiple ChatAgents with human-in-the-loop plan review. It showcases the use of event-driven callbacks for streaming partial and final outputs, managing plan review requests and replies, and handling exceptions in a complex workflow orchestration scenario. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this to understand advanced agent collaboration patterns, interactive human plan validation, and real-time streaming output within the new Agent Framework.",
      "tags": [
        "workflow",
        "human_in_loop",
        "streaming",
        "advanced"
      ]
    },
    {
      "name": "sequential_custom_executors",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/orchestration/sequential_custom_executors.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/orchestration/sequential_custom_executors.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to build a sequential workflow in the Agent Framework by chaining an AI content agent with a custom summarizer executor that processes and appends a summary to the shared conversation context. Key concepts include using SequentialBuilder for ordered execution, defining custom Executors with async handlers, managing a conversation with shared ChatMessage objects, and yielding outputs via WorkflowContext. Developers migrating from frameworks like AutoGen or Semantic Kernel will find this example useful to understand how to implement custom workflow participants and integrate multiple agents or executors in a coherent, sequential pipeline.",
      "tags": [
        "workflow",
        "agent",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "concurrent_custom_aggregator",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/orchestration/concurrent_custom_aggregator.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/orchestration/concurrent_custom_aggregator.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to build a concurrent workflow in the Agent Framework using ConcurrentBuilder to fan out a single prompt to multiple domain-specific agents and then fan in their responses with a custom asynchronous aggregator. It covers key concepts such as customizing aggregation logic with Async callbacks that leverage AzureOpenAIChatClient to synthesize a concise summary, managing parallel execution of participants, and producing a unified workflow output. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this example valuable for implementing advanced parallel orchestration patterns with custom response handling and aggregation in agent workflows.",
      "tags": [
        "workflow",
        "agent",
        "advanced",
        "autogen_migration"
      ]
    },
    {
      "name": "concurrent_custom_agent_executors",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/orchestration/concurrent_custom_agent_executors.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/orchestration/concurrent_custom_agent_executors.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to implement concurrent orchestration using custom Executor classes within the Microsoft Agent Framework. It covers key concepts such as creating ChatAgents for each executor via AzureOpenAIChatClient, handling asynchronous fan-out/fan-in workflows using ConcurrentBuilder, and leveraging the default aggregator for consolidating responses. Developers migrating from frameworks like AutoGen or Semantic Kernel can reference this sample to understand integrating multiple specialized agents running concurrently and collecting their outputs in a scalable, maintainable way.",
      "tags": [
        "workflow",
        "agent",
        "parallel",
        "autogen_migration"
      ]
    },
    {
      "name": "sequential_agents",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/orchestration/sequential_agents.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/orchestration/sequential_agents.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to construct a sequential workflow using the Agent Framework's SequentialBuilder with multiple domain-specific agents sharing the same conversation context. It highlights key concepts such as agent composition, shared state management via conversation history as lists of ChatMessage objects, and streaming workflow output handling. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this example useful for understanding how to orchestrate multi-agent interactions with Azure OpenAI clients in a sequential, agent-focused manner.",
      "tags": [
        "agent",
        "workflow",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "concurrent_agents",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/orchestration/concurrent_agents.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/orchestration/concurrent_agents.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates building a high-level concurrent workflow using the Agent Framework's ConcurrentBuilder to fan out a single prompt to multiple domain-specific agents and then fan-in their responses into a unified output. It covers key concepts like concurrent workflows, agent orchestration, and aggregation of ChatMessage results, showcasing minimal wiring with the default dispatcher and aggregator. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this example to implement parallel agent execution and combined result aggregation efficiently within the new Agent Framework.",
      "tags": [
        "agent",
        "workflow",
        "parallel",
        "autogen_migration"
      ]
    },
    {
      "name": "magentic",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/orchestration/magentic.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/orchestration/magentic.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to build and orchestrate a multi-agent workflow using the MagenticBuilder within the Agent Framework. It highlights key concepts such as agent collaboration, streaming callbacks for real-time event handling, and integration of specialized agents (ResearcherAgent and CoderAgent) with different OpenAI chat clients and tools. Developers migrating from AutoGen, Semantic Kernel, or LangChain will find this example useful for understanding advanced multi-agent orchestration patterns and implementing streaming observability within their workflows.",
      "tags": [
        "workflow",
        "agent",
        "streaming",
        "advanced"
      ]
    },
    {
      "name": "magentic_checkpoint",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/orchestration/magentic_checkpoint.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/orchestration/magentic_checkpoint.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to implement a Magentic orchestration workflow with checkpointing and human plan review using the Agent Framework. It covers critical concepts such as deterministic executor IDs for stable workflow state, executor snapshotting to persist workflow checkpoints, and resuming workflows with injected human responses. Developers migrating from AutoGen or Semantic Kernel who need reliable workflow pausing, persistence, and human-in-the-loop control should reference this pattern for handling complex orchestration and checkpoint recovery scenarios.",
      "tags": [
        "workflow",
        "checkpoint",
        "human_in_loop",
        "intermediate"
      ]
    },
    {
      "name": "agent",
      "category": "devui",
      "file_path": "python/samples/getting_started/devui/weather_agent_azure/agent.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/devui/weather_agent_azure/agent.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to build a weather agent using the Agent Framework integrated with Azure OpenAI Chat Client, highlighting middleware usage for request filtering and function execution control. It covers key Agent Framework concepts such as chat and function middleware, agent configuration with custom tools (functions), and deployment via the DevUI server for interactive debugging. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this sample to understand how to implement middleware-based request validation and compose agents with tool functions in an idiomatic Agent Framework style, aiding in effective migration and leveraging Azure OpenAI integration.",
      "tags": [
        "agent",
        "middleware",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "agent",
      "category": "devui",
      "file_path": "python/samples/getting_started/devui/foundry_agent/agent.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/devui/foundry_agent/agent.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to build and run a weather agent using the Agent Framework integrated with Azure AI Foundry, showcasing asynchronous Azure CLI authentication and tool-based capabilities for providing weather info and forecasts. It covers creating a ChatAgent with custom tools, secure async credential management, and serving the agent with DevUI for interactive debugging and testing. Developers migrating from AutoGen, Semantic Kernel, or LangChain will find this sample valuable for understanding agent configuration, tool integration, and seamless Azure AI service authentication within the new Agent Framework ecosystem.",
      "tags": [
        "agent",
        "chat_client",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "workflow",
      "category": "devui",
      "file_path": "python/samples/getting_started/devui/spam_workflow/workflow.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/devui/spam_workflow/workflow.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates a comprehensive multi-step workflow for spam email detection, illustrating the use of multiple executors with complex branching and realistic processing delays within the Agent Framework. It covers key concepts such as workflow building, context handling, asynchronous executors, and structured data passing between steps using dataclasses and Pydantic models. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this to understand how to implement robust, maintainable workflows with clear separation of concerns and modular task execution in the Agent Framework.",
      "tags": [
        "workflow",
        "agent",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "workflow",
      "category": "devui",
      "file_path": "python/samples/getting_started/devui/workflow_agents/workflow.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/devui/workflow_agents/workflow.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates a complex multi-agent workflow using the Agent Framework, featuring conditional routing and quality-based branching in a content creation pipeline. It illustrates key concepts such as creating agents with structured outputs, defining conditional workflow edges based on agent evaluations, and converging multiple workflow paths for downstream processing. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this example useful for implementing advanced quality-driven workflows with branching and convergence using the Agent Framework's WorkflowBuilder and structured response handling.",
      "tags": [
        "workflow",
        "structured_output",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "workflow",
      "category": "devui",
      "file_path": "python/samples/getting_started/devui/fanout_workflow/workflow.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/devui/fanout_workflow/workflow.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates a sophisticated fan-in/fan-out data processing workflow using the Agent Framework, showcasing how to orchestrate complex parallel and conditional processing stages such as data validation, transformation, quality assurance, and aggregation. Key concepts covered include workflow construction with concurrency, handling detailed domain models via Pydantic, and simulating real-world processing with asynchronous handlers and rich data types. Developers migrating from AutoGen, Semantic Kernel, or LangChain will find this example valuable for implementing advanced data pipelines requiring structured inputs, parallel execution, and multi-stage integration within the Agent Framework.",
      "tags": [
        "workflow",
        "advanced",
        "parallel",
        "autogen_migration"
      ]
    },
    {
      "name": "middleware_documentation",
      "category": "middleware",
      "file_path": "python/samples/getting_started/middleware/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/middleware/README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides comprehensive examples of middleware usage within the Agent Framework, covering function-based, class-based, and decorator-based middleware implementations. It explains key middleware types\u2014agent, function, and chat middleware\u2014and demonstrates practical patterns such as security validation, logging, error handling, result transformation, state sharing, and execution control via termination and result overriding. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this guide invaluable for understanding how to intercept and manipulate agent execution flows to implement cross-cutting concerns effectively.",
      "tags": [
        "middleware",
        "agent",
        "intermediate",
        "autogen_migration",
        "semantic_kernel_migration",
        "langchain_migration",
        "observability"
      ]
    },
    {
      "name": "tools_documentation",
      "category": "tools",
      "file_path": "python/samples/getting_started/tools/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/tools/README.md",
      "language": "python",
      "type": "documentation",
      "processed": true
    },
    {
      "name": "devui_documentation",
      "category": "devui",
      "file_path": "python/samples/getting_started/devui/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/devui/README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides a comprehensive overview of the DevUI sample application within the Agent Framework, detailing how to interactively develop, test, and run agents and workflows via a lightweight web interface. It covers key concepts such as agent and workflow structure, environment variable management, in-memory and directory-based entity registration, and integration with Azure OpenAI services. Developers migrating from other frameworks like AutoGen, Semantic Kernel, or LangChain will find this guide invaluable for quickly adopting Agent Framework's interactive testing capabilities and understanding programmatic and declarative agent registration methods.",
      "tags": [
        "documentation",
        "agent",
        "workflow",
        "tools",
        "beginner",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "multimodal_input_documentation",
      "category": "multimodal_input",
      "file_path": "python/samples/getting_started/multimodal_input/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/multimodal_input/README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation demonstrates how to integrate and send multimodal content\u2014including images, audio, and PDF files\u2014to AI agents within the Agent Framework using various OpenAI and Azure OpenAI clients. It details client-specific capabilities, environment configuration, authentication methods, and practical code examples for handling multimodal inputs effectively. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should consult this guide when adapting their workflows to support multimodal interactions or when leveraging new agent SDK features for enhanced content types.",
      "tags": [
        "documentation",
        "agent",
        "chat_client",
        "multimodal",
        "intermediate",
        "semantic_kernel_migration",
        "autogen_migration"
      ]
    },
    {
      "name": "workflows_documentation",
      "category": "workflows",
      "file_path": "python/samples/getting_started/workflows/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/workflows/README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides a comprehensive overview and hands-on samples for workflows within the Microsoft Agent Framework, covering foundational concepts such as executors, edges, agents, streaming, checkpointing, orchestration, parallelism, and human-in-the-loop interactions. It highlights key capabilities including workflow composition, conditional control flow, concurrent orchestration, and observability to empower developers to build robust agent-driven workflows. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this guide to understand the Agent Framework's unique workflow primitives, orchestration patterns, and actionable examples that ease transition and adoption.",
      "tags": [
        "documentation",
        "workflow",
        "agent",
        "beginner",
        "intermediate",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "agents_documentation",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides a comprehensive overview of creating and using agents within the Agent Framework across multiple AI service providers including Azure AI Foundry, Microsoft Copilot Studio, Azure OpenAI, OpenAI, and Anthropic. It demonstrates key capabilities such as function tools integration, code interpretation, thread management, Model Context Protocol (MCP) support, streaming and non-streaming responses, authentication handling, and multimodal processing including image analysis and web search. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find these examples valuable for understanding how to implement flexible, provider-specific agents and customize chat clients within the Agent Framework to leverage advanced conversational AI features.",
      "tags": [
        "documentation",
        "agent",
        "chat_client",
        "multimodal",
        "streaming",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "mcp_documentation",
      "category": "mcp",
      "file_path": "python/samples/getting_started/mcp/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/mcp/README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides an overview of the Model Context Protocol (MCP), an open standard for integrating AI agents with diverse data sources and tools via a secure and standardized communication protocol. It covers key Agent Framework capabilities such as exposing an agent as an MCP server and implementing API key authentication to control access. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this documentation when they need to implement interoperable, secure agent connectivity and data access patterns in their applications.",
      "tags": [
        "documentation",
        "agent",
        "middleware",
        "beginner",
        "autogen_migration",
        "semantic_kernel_migration",
        "langchain_migration"
      ]
    },
    {
      "name": "observability_documentation",
      "category": "observability",
      "file_path": "python/samples/getting_started/observability/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/observability/README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides comprehensive guidance on enabling and configuring observability features within the Agent Framework using Python. It explains how to capture and export telemetry data such as logs, traces, and metrics leveraging OpenTelemetry standards, with support for various Application Performance Management (APM) backends like Application Insights and Aspire Dashboard. Developers migrating from frameworks such as AutoGen, Semantic Kernel, or LangChain can reference this to implement robust monitoring, traceability, and performance tracking in their AI agent applications.",
      "tags": [
        "documentation",
        "agent",
        "observability",
        "intermediate",
        "semantic_kernel_migration",
        "autogen_migration",
        "langchain_migration"
      ]
    },
    {
      "name": "threads_documentation",
      "category": "threads",
      "file_path": "python/samples/getting_started/threads/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/threads/README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation covers advanced thread management techniques within the Agent Framework, focusing on managing conversation threads and chat message persistence. It explains how to implement custom message stores, suspend and resume conversations, and utilize Redis-backed storage for scalable, production-ready applications. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this guide when they need robust, persistent conversation management and advanced thread control capabilities.",
      "tags": [
        "documentation",
        "agent",
        "chat_client",
        "advanced",
        "autogen_migration",
        "semantic_kernel_migration",
        "langchain_migration"
      ]
    },
    {
      "name": "chat_client_documentation",
      "category": "chat_client",
      "file_path": "python/samples/getting_started/chat_client/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/chat_client/README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation showcases practical examples of using various chat client implementations within the Agent Framework, including Azure and OpenAI clients for chat interactions and structured response generation. It highlights environment setup and demonstrates key capabilities such as handling streaming chat responses and cancellations. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this to understand direct chat client integration patterns and environment configurations specific to the Agent Framework.",
      "tags": [
        "documentation",
        "chat_client",
        "beginner",
        "streaming",
        "structured_output",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "evaluation_documentation",
      "category": "evaluation",
      "file_path": "python/samples/getting_started/evaluation/azure_ai_foundry/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/evaluation/azure_ai_foundry/README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation demonstrates the use of Azure AI Foundry's evaluation and red teaming capabilities with Agent Framework agents to identify and mitigate adversarial attacks. It covers creating agents inline, configuring asynchronous callbacks for red team scanning, running multi-strategy safety evaluations, interpreting attack success rates, and iteratively improving agent safety guardrails. Developers migrating from frameworks such as AutoGen, Semantic Kernel, or LangChain should reference this guide to integrate rigorous safety assessments and employ best practices for secure, resilient conversational agents within their pipelines.",
      "tags": [
        "documentation",
        "agent",
        "advanced",
        "tools",
        "red_team_evaluation",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "context_providers_documentation",
      "category": "context_providers",
      "file_path": "python/samples/getting_started/context_providers/redis/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/context_providers/redis/README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation demonstrates how to leverage the Redis context provider with the Agent Framework to enable persistent, searchable agent memory using Redis and RediSearch. It covers key features such as full-text and hybrid vector search, memory scoping by thread and agent, index lifecycle management, and integration of tools with stateful memory. Developers migrating from AutoGen, Semantic Kernel, or LangChain seeking to implement scalable, persistent agent memory with advanced retrieval capabilities and thread-level memory isolation will find this guide essential.",
      "tags": [
        "documentation",
        "agent",
        "intermediate",
        "redis",
        "context_provider",
        "semantic_kernel_migration",
        "autogen_migration"
      ]
    },
    {
      "name": "context_providers_documentation",
      "category": "context_providers",
      "file_path": "python/samples/getting_started/context_providers/mem0/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/context_providers/mem0/README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation explains how to integrate the Mem0 context provider within the Agent Framework to enable persistent long-term memory across conversation sessions. It covers key capabilities such as different memory scoping strategies (global vs. per-thread) and memory association through identifiers like user, agent, and thread IDs. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this guide to implement robust and customizable memory layers for agents, enhancing context management and user personalization.",
      "tags": [
        "documentation",
        "agent",
        "intermediate",
        "semantic_kernel_migration",
        "autogen_migration",
        "langchain_migration",
        "context_providers"
      ]
    },
    {
      "name": "agents_documentation",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_openai/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_openai/README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides comprehensive examples demonstrating how to create and manage agents using the Azure OpenAI chat clients within the Agent Framework. It covers key capabilities such as streaming and non-streaming chat interactions, function tools integration, code interpretation, thread (conversation) management, and multimodal message handling for image analysis. Developers migrating from other frameworks like AutoGen, Semantic Kernel, or LangChain should reference this guide to understand how to leverage Azure-specific clients, authentication mechanisms, and client-specific behaviors for building scalable, context-aware agents.",
      "tags": [
        "documentation",
        "agent",
        "chat_client",
        "beginner",
        "intermediate",
        "azure_openai",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "agents_documentation",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/a2a/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/a2a/README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides a practical introduction to creating and using agents with the A2A (Agent2Agent) protocol using the Agent Framework's agent_framework package. It covers key capabilities such as agent discovery via agent cards and basic message exchange between remote A2A agents, facilitating inter-agent communication. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this guide to understand how to implement agent-to-agent protocols and establish connections with remote agents for distributed workflows.",
      "tags": [
        "documentation",
        "agent",
        "beginner",
        "a2a_protocol",
        "autogen_migration",
        "semantic_kernel_migration",
        "langchain_migration"
      ]
    },
    {
      "name": "agents_documentation",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/azure_ai/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/azure_ai/README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides comprehensive examples of creating and using Azure AI agents with the Agent Framework's `agent_framework.azure` package. It covers key capabilities such as integrating Bing web search for real-time information, executing code with a hosted interpreter, managing threads and agents, connecting with Model Context Protocol (MCP) servers, and leveraging a variety of tools including OpenAPI and file search. Developers migrating from other frameworks like AutoGen, Semantic Kernel, or LangChain will find this resource essential for understanding Azure-specific agent configurations, tool integrations, and environment setup for seamless transitions to the Agent Framework.",
      "tags": [
        "documentation",
        "agent",
        "tools",
        "azure_ai",
        "beginner",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "agents_documentation",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/anthropic/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/anthropic/README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation demonstrates how to integrate Anthropic's Claude models with the Agent Framework by configuring the OpenAI Chat Client for streaming and non-streaming responses and utilizing tool calling capabilities. It highlights environment setup including required API keys and model selection to enable seamless interaction with Claude models. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this guide to learn how to transition their chat clients and leverage Anthropic models within the Agent Framework's agent pattern.",
      "tags": [
        "documentation",
        "agent",
        "chat_client",
        "beginner",
        "streaming",
        "tool_calling",
        "autogen_migration"
      ]
    },
    {
      "name": "agents_documentation",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/ollama/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/ollama/README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides practical examples on integrating Ollama models with the Agent Framework, focusing on configuring the OpenAI Chat Client for local Ollama model usage. It covers key capabilities such as function calling, streaming and non-streaming responses, and environment-based configuration. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should consult this guide to leverage local Ollama models effectively within agents, especially when aiming to maintain or improve tool calling and chat client patterns.",
      "tags": [
        "documentation",
        "agent",
        "chat_client",
        "beginner",
        "streaming",
        "autogen_migration",
        "langchain_migration"
      ]
    },
    {
      "name": "agents_documentation",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/custom/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/custom/README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides comprehensive examples on creating custom agents and chat clients within the Microsoft Agent Framework, illustrating key concepts such as extending base classes, handling streaming and non-streaming responses, thread management, and message history. It explains how to implement the necessary methods to control agent behavior and integrate custom chat clients with the framework's agent system using the create_agent() method. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this guide essential for understanding how to extend and customize agents and chat clients while maintaining compatibility within the Agent Framework ecosystem.",
      "tags": [
        "documentation",
        "agent",
        "chat_client",
        "intermediate",
        "streaming",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "agents_documentation",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/copilotstudio/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/copilotstudio/README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides detailed examples and setup instructions for using the Microsoft Copilot Studio Agent within the Agent Framework. It covers essential concepts like authentication with Azure AD, configuring agents via environment variables or explicit settings, and executing both streaming and non-streaming queries. Developers migrating from frameworks such as AutoGen, Semantic Kernel, or LangChain should consult this guide to understand how to integrate Copilot Studio agents leveraging MSAL authentication, environment-based configurations, and manual token handling for advanced scenarios.",
      "tags": [
        "documentation",
        "agent",
        "beginner",
        "streaming",
        "autogen_migration",
        "semantic_kernel_migration",
        "langchain_migration"
      ]
    },
    {
      "name": "agents_documentation",
      "category": "agents",
      "file_path": "python/samples/getting_started/agents/openai/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python/samples/getting_started/agents/openai/README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides comprehensive examples showcasing how to build and utilize agents with OpenAI clients within the Agent Framework. It covers key capabilities including chat management, thread handling for conversation context, function tool integration, code interpretation, file and web search, vision, and structured output generation. Developers migrating from other frameworks like AutoGen, Semantic Kernel, or LangChain will find this resource valuable for transitioning their agent implementations to leverage OpenAI's assistant features efficiently while mastering context management and advanced tool usage.",
      "tags": [
        "documentation",
        "agent",
        "chat_client",
        "tools",
        "beginner",
        "intermediate",
        "autogen_migration"
      ]
    }
  ],
  "dotnet": [
    {
      "name": "HostAgentFactory",
      "category": "A2AClientServer",
      "file_path": "dotnet/samples/A2AClientServer/A2AServer/HostAgentFactory.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/A2AClientServer/A2AServer/HostAgentFactory.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create and configure A2AHostAgents using either the PersistentAgentsClient for agent retrieval or the OpenAI chat completion client for direct chat-based agents. It covers key Agent Framework concepts such as agent instantiation, capability declaration with AgentCards and AgentSkills, and managing different agent types like Invoice, Policy, and Logistics agents. Developers migrating from frameworks like Semantic Kernel or AutoGen will find this sample useful for understanding how to structure agent capabilities and skills within the A2A architecture and how to integrate tools for enhanced agent functionality.",
      "tags": [
        "agent",
        "intermediate",
        "semantic_kernel_migration",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "A2AClientServer",
      "file_path": "dotnet/samples/A2AClientServer/A2AServer/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/A2AClientServer/A2AServer/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the setup of an A2A server agent in a .NET environment, showcasing how to configure and run different types of AI agents specialized for Invoice, Policy, and Logistics domains. It covers key concepts of the Agent Framework such as agent creation using Foundry or Chat Completion APIs, tool integration (AITool), environment configuration, and HTTP client setup within an ASP.NET Core web application. Developers migrating from AutoGen, Semantic Kernel, or LangChain frameworks will find this example valuable for understanding agent instantiation, capability extension via tools, and web endpoint mapping within the new Agent Framework ecosystem.",
      "tags": [
        "agent",
        "tools",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "HostClientAgent",
      "category": "A2AClientServer",
      "file_path": "dotnet/samples/A2AClientServer/A2AClient/HostClientAgent.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/A2AClientServer/A2AClient/HostClientAgent.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create a HostClientAgent within the Agent Framework that connects to multiple remote AI agents via A2A (Agent-to-Agent) communication and orchestrates them as tools to provide answers to user queries. It showcases key concepts such as agent composition, remote agent integration using HTTP, and leveraging OpenAI's ChatClient for building a meta-agent that delegates tasks to specialized sub-agents. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this sample to understand patterns for distributed agent architectures and tool-based agent composition in the new Agent Framework.",
      "tags": [
        "agent",
        "tools",
        "intermediate",
        "a2a_migration"
      ]
    },
    {
      "name": "Program",
      "category": "A2AClientServer",
      "file_path": "dotnet/samples/A2AClientServer/A2AClient/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/A2AClientServer/A2AClient/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to build a command-line A2A (Agent-to-Agent) client using the Microsoft Agent Framework, highlighting fundamental concepts such as agent initialization, configuration management, multi-agent communication, and threaded dialogues. It showcases how to set up and configure a host client agent with API keys, model IDs, and multiple agent URLs, and then handle interactive user inputs in a loop with real-time agent responses. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this sample valuable for understanding how to implement client-side agent orchestration and communication patterns in the new Agent Framework environment.",
      "tags": [
        "agent",
        "chat_client",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "InvoiceQuery",
      "category": "A2AClientServer",
      "file_path": "dotnet/samples/A2AClientServer/A2AServer/Models/InvoiceQuery.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/A2AClientServer/A2AServer/Models/InvoiceQuery.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates a simple Invoice Query system within the A2AClientServer category, showcasing how to model and query invoice data with associated product details. It covers key concepts such as data modeling, mock data generation, and filtering with optional date ranges to simulate realistic invoice queries. Developers migrating from frameworks like AutoGen or Semantic Kernel should reference this sample for practical examples of structuring data models and querying mock data in a server-side environment, which aids in understanding how to translate legacy data handling approaches to the new Agent Framework conventions.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "structured_output"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/AgentOpenTelemetry/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/AgentOpenTelemetry/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates integrating the Microsoft Agent Framework with OpenTelemetry to enable comprehensive observability including tracing, metrics, and structured logging for AI agent interactions. It covers key concepts such as activity sources, custom instrumentation with counters and histograms, telemetry-enabled Azure OpenAI chat clients, and agent-level telemetry configuration. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this to implement advanced observability and monitoring capabilities within their AI agents for improved diagnostics and performance insights.",
      "tags": [
        "agent",
        "observability",
        "autogen_migration",
        "beginner"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/AgentWithOpenAI/Agent_OpenAI_Step01_Running/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/AgentWithOpenAI/Agent_OpenAI_Step01_Running/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create and interact with a simple AI agent using the Microsoft Agent Framework and OpenAI as the backend. It covers essential concepts such as agent creation with specific instructions, synchronous and asynchronous invocation, and handling streaming responses. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this useful for understanding basic agent setup and communication patterns in the Agent Framework.",
      "tags": [
        "agent",
        "beginner",
        "openai",
        "streaming"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/AgentWithOpenAI/Agent_OpenAI_Step02_Reasoning/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/AgentWithOpenAI/Agent_OpenAI_Step02_Reasoning/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create and utilize an AI agent with integrated reasoning capabilities using the .NET Agent Framework and OpenAI's GPT model. It highlights key concepts such as configuring reasoning effort levels, handling both non-streaming and streaming AI responses, and managing token usage metrics. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this for implementing advanced reasoning logic and streaming response handling in conversational AI agents.",
      "tags": [
        "agent",
        "chat_client",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/ModelContextProtocol/Agent_MCP_Server/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/ModelContextProtocol/Agent_MCP_Server/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create and use a simple AI agent that integrates with an external Model Context Protocol (MCP) Server to leverage available tools, specifically for querying GitHub repository information. It covers key Agent Framework concepts such as creating an MCP client, listing tools dynamically from the MCP server, and composing an AI agent with specific instructions and tools to handle a focused domain. Developers migrating from other frameworks like AutoGen, Semantic Kernel, or LangChain will find this useful for adapting tool-based AI agents that utilize external services and protocols, highlighting how to incorporate tool invocation within the agent workflow effectively.",
      "tags": [
        "agent",
        "tools",
        "beginner",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/ModelContextProtocol/Agent_MCP_Server_Auth/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/ModelContextProtocol/Agent_MCP_Server_Auth/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create and authenticate an AI agent communicating with a protected Model Context Protocol (MCP) server requiring OAuth flows. It highlights key Agent Framework concepts such as integrating secure MCP tool invocation, customizing HTTP clients, and handling OAuth authorization within .NET applications. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this sample invaluable for implementing authenticated agent-tool interactions and adapting OAuth-based authentication workflows in their own AI solutions.",
      "tags": [
        "agent",
        "tools",
        "advanced",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/ModelContextProtocol/FoundryAgent_Hosted_MCP/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/ModelContextProtocol/FoundryAgent_Hosted_MCP/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create, configure, and invoke a persistent AI agent backed by Azure Foundry Agents using the Azure.AI.Agents.Persistent SDK. It covers key Agent Framework concepts including persistent agent creation, tool integration with MCPToolDefinition, agent invocation with customization via ChatClientAgentRunOptions, and lifecycle management of server-side agents. Developers migrating from frameworks like AutoGen or Semantic Kernel will find this sample valuable for understanding how to leverage persistent agents and tool-based knowledge integration in the new Agent Framework environment.",
      "tags": [
        "agent",
        "tools",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/AgentProviders/Agent_With_A2A/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/AgentProviders/Agent_With_A2A/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to integrate and utilize an existing Agent-to-Agent (A2A) AI agent within the Microsoft Agent Framework, showcasing the creation of an AIAgent instance using an A2ACardResolver. Key concepts include resolving agent cards, connecting to remote A2A agents, and invoking agent runs to retrieve responses. Developers migrating from frameworks like AutoGen or Semantic Kernel can reference this example to understand how to incorporate pre-existing agents configured via environment variables into their applications within the Agent Framework.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "a2a"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/AgentProviders/Agent_With_OpenAIResponses/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/AgentProviders/Agent_With_OpenAIResponses/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create and use a simple AI agent leveraging OpenAI's response client within the Microsoft Agent Framework. It covers key concepts such as setting up the OpenAIClient, configuring an AI agent with customized instructions and model selection, and invoking the agent asynchronously to get text responses. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this to understand the basic setup and usage patterns for integrating OpenAI models as AI agents in the Microsoft ecosystem.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "openai_integration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/AgentProviders/Agent_With_CustomImplementation/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/AgentProviders/Agent_With_CustomImplementation/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create a fully custom AI agent implementation in the Microsoft Agent Framework that processes input without using AI, instead simply echoing the user's input in uppercase. It covers essential concepts such as custom agent and thread creation, handling synchronous and streaming responses, message cloning and transformation, and thread state management. Developers migrating from frameworks like AutoGen or Semantic Kernel will find this example useful to understand how to implement bespoke agent logic and manage conversation state within the Microsoft ecosystem.",
      "tags": [
        "agent",
        "beginner",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/AgentProviders/Agent_With_AzureOpenAIChatCompletion/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/AgentProviders/Agent_With_AzureOpenAIChatCompletion/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create and use a simple AI agent with Azure OpenAI Chat Completion as the backend using the Microsoft Agent Framework. It covers key concepts such as initializing an AI agent with Azure credentials, setting up a chat completion client, and invoking the agent to generate natural language responses. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this example helpful for understanding Agent Framework's approach to integrating Azure OpenAI services for conversational AI tasks.",
      "tags": [
        "agent",
        "chat_client",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/AgentProviders/Agent_With_OpenAIChatCompletion/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/AgentProviders/Agent_With_OpenAIChatCompletion/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create a simple AI agent using the Agent Framework with OpenAI's Chat Completion service as the backend. It covers foundational concepts such as initializing an AI agent, setting instructions, and invoking the agent to generate chat-based responses. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this sample useful for understanding agent instantiation and basic usage with OpenAI chat models in the new Agent Framework.",
      "tags": [
        "agent",
        "chat_client",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/AgentProviders/Agent_With_ONNX/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/AgentProviders/Agent_With_ONNX/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create and use a simple AI agent powered by an ONNX model in .NET, highlighting agent instantiation and basic interaction via a chat client. It covers foundational Agent Framework concepts including agent creation, integration with ONNX as a backend, and invoking the agent using prompts, while also noting ONNX's limitation regarding function calling support. Developers migrating from other AI frameworks like AutoGen, Semantic Kernel, or LangChain can use this as a reference for connecting ONNX models within the Agent Framework and adapting to backend-specific constraints.",
      "tags": [
        "agent",
        "chat_client",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/AgentProviders/Agent_With_AzureFoundryAgent/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/AgentProviders/Agent_With_AzureFoundryAgent/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create and interact with server-side persistent AI agents using the Azure Foundry backend within the Agent Framework. It covers key concepts including agent creation, retrieval, running conversations, and cleanup using the PersistentAgentsClient and AIAgent abstractions. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this to understand how to leverage Azure's managed agent services for stateful and persistent AI agents in a scalable way.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "persistent_agents"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/AgentProviders/Agent_With_Ollama/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/AgentProviders/Agent_With_Ollama/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create and interact with a simple AI agent using the Ollama backend within the .NET Agent Framework. It covers key concepts such as configuring an AI agent with specific instructions, utilizing environment variables for endpoint and model configuration, and invoking the agent to generate conversational output. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this example to understand how to set up and run AI agents in the Agent Framework using Ollama as the chat client provider.",
      "tags": [
        "agent",
        "chat_client",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/AgentProviders/Agent_With_AzureOpenAIResponses/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/AgentProviders/Agent_With_AzureOpenAIResponses/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create and utilize a simple AI agent leveraging Azure OpenAI Responses backend within the Microsoft Agent Framework. It covers foundational concepts such as initializing the Azure OpenAI client with proper credentials, setting deployment details, defining agent instructions, and invoking the agent to generate responses. Developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain will find this example useful for understanding how to transition their conversational AI agents to the Microsoft Agent Framework using Azure OpenAI services.",
      "tags": [
        "agent",
        "beginner",
        "semantic_kernel_migration",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/AgentProviders/Agent_With_AzureFoundryModel/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/AgentProviders/Agent_With_AzureFoundryModel/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to configure and use the OpenAI SDK to create a simple AI agent leveraging any model hosted within Azure AI Foundry. It covers key Agent Framework concepts such as client initialization with Azure Foundry endpoints, authentication using API keys or Azure CLI credentials, and agent creation with tailored instructions. Developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain will find this reference valuable for adapting their agent workflows to the Azure Foundry environment while maintaining flexibility for various model providers.",
      "tags": [
        "agent",
        "beginner",
        "semantic_kernel_migration",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/AgentProviders/Agent_With_OpenAIAssistants/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/AgentProviders/Agent_With_OpenAIAssistants/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create and interact with OpenAI Assistants as AI agents using the Microsoft Agent Framework. It covers key concepts including assistant creation, retrieving existing agents, running conversational threads, and cleaning up resources. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this to understand the legacy integration with OpenAI Assistants and how to adapt their agents using the new Agent Framework patterns and APIs.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "chat_client"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Agents/Agent_Step04_UsingFunctionToolsWithApprovals/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Agents/Agent_Step04_UsingFunctionToolsWithApprovals/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to implement a ChatClientAgent that uses function tools requiring human approval before invocation, highlighting both non-streaming and streaming interaction patterns. It covers key Agent Framework concepts such as function wrapping with approval workflows, managing user input requests, and resuming agent execution based on user responses. Developers migrating from frameworks like AutoGen or Semantic Kernel will find this sample useful for understanding how to integrate human-in-the-loop approvals in function tool usage within the Agent Framework.",
      "tags": [
        "agent",
        "tools",
        "human_in_loop",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Agents/Agent_Step15_Plugins/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Agents/Agent_Step15_Plugins/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to integrate plugins within an AI agent using the Microsoft Agent Framework, highlighting dependency injection and selective exposure of plugin methods as AI tools. It showcases key concepts such as service registration, resolving dependencies inside plugin classes, and how to explicitly specify which plugin methods are available to the AI agent. Developers migrating from frameworks like AutoGen or Semantic Kernel will find this example valuable for understanding how to structure and expose functionalities as tools within the Agent Framework plugins.",
      "tags": [
        "agent",
        "tools",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Agents/Agent_Step11_UsingImages/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Agents/Agent_Step11_UsingImages/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to leverage the Azure OpenAI client to create an AI agent capable of analyzing images using multi-modal input, specifically combining text and image content within a chat context. It highlights key Agent Framework concepts such as creating AI agents, handling mixed content messages with text and images, asynchronous streaming responses, and managing conversational threads. Developers migrating from AutoGen, Semantic Kernel, or LangChain frameworks can reference this to learn how to implement multi-modal AI agents and handle streaming outputs effectively within the updated Azure AI SDK.",
      "tags": [
        "agent",
        "multimodal",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Agents/Agent_Step16_ChatReduction/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Agents/Agent_Step16_ChatReduction/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to implement a chat history reducer within the Microsoft Agent Framework to maintain conversation context under model size limits. It highlights creating an in-memory chat message store that prunes older messages, ensuring only recent non-system messages are retained, which is critical for managing token usage in chat-based AI models. Developers migrating from frameworks like AutoGen or Semantic Kernel can reference this to understand how to effectively control chat history size while preserving conversational relevance.",
      "tags": [
        "agent",
        "chat_client",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Agents/Agent_Step12_AsFunctionTool/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Agents/Agent_Step12_AsFunctionTool/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create and compose AI agents using Azure OpenAI in the .NET Agent Framework, specifically showcasing how to define custom function tools and integrate them as agents. It highlights key concepts such as creating agents from chat clients, registering function tools, and composing agents by passing other agents as function tools for task delegation. Developers migrating from frameworks like AutoGen or Semantic Kernel will find this sample useful for understanding how to model complex agent interactions using function-based tools within the new Agent Framework.",
      "tags": [
        "agent",
        "tools",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Agents/Agent_Step05_StructuredOutput/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Agents/Agent_Step05_StructuredOutput/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to configure the ChatClientAgent to produce and handle structured output by defining a typed data model (PersonInfo) and using it in agent invocations. Key concepts include typed result deserialization from AI responses, streaming agent responses with JSON schema-based structured output, and integrating strongly-typed data contracts within the Agent Framework. Developers migrating from other frameworks like AutoGen, Semantic Kernel, or LangChain should reference this sample when they need to parse complex structured results from prompts and handle streaming outputs while maintaining type safety and clarity.",
      "tags": [
        "agent",
        "beginner",
        "structured_output",
        "streaming"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Agents/Agent_Step02_MultiturnConversation/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Agents/Agent_Step02_MultiturnConversation/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create and interact with a simple AI agent using the Microsoft Agent Framework, specifically focusing on multi-turn conversations that maintain context within a conversational thread. It covers key concepts such as agent creation with Azure OpenAI, managing conversation threads to preserve dialogue state, and handling both standard and streaming responses. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this example useful for understanding how to implement conversational continuity and streaming in the new agent architecture.",
      "tags": [
        "agent",
        "beginner",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Agents/Agent_Step06_PersistedConversations/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Agents/Agent_Step06_PersistedConversations/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create an AI agent using the Azure OpenAI service and manage persistent conversations by serializing and deserializing the agent's conversation thread state. It highlights key Agent Framework concepts such as agent creation, threading, running asynchronous interactions, and conversation persistence to disk using JSON serialization. Developers migrating from other AI frameworks like AutoGen, Semantic Kernel, or LangChain can reference this example to understand how to maintain and resume conversational context effectively within the Agent Framework.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "checkpoint"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Agents/Agent_Step01_Running/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Agents/Agent_Step01_Running/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the creation and use of a simple AI agent using the Azure OpenAI backend in the Microsoft Agent Framework. It covers key concepts such as initializing an AzureOpenAIClient, configuring an agent with specific instructions and name, and invoking the agent with both standard and streaming calls to handle real-time output. Developers migrating from other frameworks like AutoGen, Semantic Kernel, or LangChain will find this sample helpful for understanding the baseline setup and invocation patterns for AI agents using Azure OpenAI integration in the new Agent Framework.",
      "tags": [
        "agent",
        "beginner",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Agents/Agent_Step08_Observability/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Agents/Agent_Step08_Observability/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create and use a simple AI agent within the Azure OpenAI environment, showcasing integration with OpenTelemetry for telemetry logging and monitoring. It covers key Agent Framework concepts including agent creation, configuration with custom instructions, OpenTelemetry instrumentation for observability, and both synchronous and streaming invocation patterns. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this to understand how to enable observability and telemetry in the Agent Framework while leveraging Azure OpenAI services.",
      "tags": [
        "agent",
        "beginner",
        "streaming",
        "observability"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Agents/Agent_Step03_UsingFunctionTools/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Agents/Agent_Step03_UsingFunctionTools/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create and use a ChatClientAgent with function tools in the Azure OpenAI client, illustrating both non-streaming and streaming interactions. It covers key Agent Framework concepts such as defining function tools to extend agent capabilities and managing streaming outputs seamlessly. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this to understand how to implement function-enabled agents and adapt streaming and non-streaming conversational patterns in the new Agent Framework.",
      "tags": [
        "agent",
        "tools",
        "streaming",
        "beginner"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Agents/Agent_Step13_Memory/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Agents/Agent_Step13_Memory/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to implement a custom memory component within an AI agent using the Microsoft Agent Framework to store and recall user-specific information such as name and age. It covers key concepts such as creating AIContextProvider components for memory, serializing and deserializing conversation threads with memory state, and sharing memory across multiple conversation threads. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this sample useful for understanding how to replicate advanced memory management and personalized conversational behavior in the Microsoft Agent Framework.",
      "tags": [
        "agent",
        "intermediate",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Agents/Agent_Step07_3rdPartyThreadStorage/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Agents/Agent_Step07_3rdPartyThreadStorage/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to implement a simple AI agent using the .NET Agent Framework that supports persistent conversation state across sessions via a vector store. It showcases key concepts such as custom chat message storage, agent thread serialization and deserialization, and leveraging vector stores to maintain conversation context efficiently. Developers migrating from frameworks like AutoGen or Semantic Kernel will find this especially useful for understanding how to manage and persist conversational state in a scalable and thread-safe manner with the new agent abstractions.",
      "tags": [
        "agent",
        "beginner",
        "semantic_kernel_migration",
        "checkpoint"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Agents/Agent_Step09_DependencyInjection/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Agents/Agent_Step09_DependencyInjection/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This .NET sample demonstrates how to use dependency injection to register and utilize an AI agent within a hosted service for a user-interactive chat loop. It highlights key Agent Framework concepts such as configuring ChatClientAgentOptions, registering multiple services using Microsoft's dependency injection, and handling streaming AI chat responses within a long-lived conversation thread. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this sample useful for understanding how to integrate AI agents seamlessly into .NET's hosting and dependency injection model for conversational AI scenarios.",
      "tags": [
        "agent",
        "chat_client",
        "streaming",
        "beginner"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Agents/Agent_Step10_AsMcpTool/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Agents/Agent_Step10_AsMcpTool/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to expose a server-side persistent AI agent as an MCP (Model Context Protocol) tool using the Azure AI Agents framework. It covers key concepts such as creating and retrieving persistent agents, converting agents to AIFunctions, and integrating them with an MCP server using standardized transports and tool registration. Developers migrating from frameworks like AutoGen or Semantic Kernel will find this example useful for understanding how to transition persistent agent management and tool exposure within Azure's Agents ecosystem.",
      "tags": [
        "agent",
        "tools",
        "advanced",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Agents/Agent_Step14_Middleware/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Agents/Agent_Step14_Middleware/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the integration of multiple middleware layers within the Azure AI Agent Framework, showcasing middleware applied at the chat client, agent, function invocation, and per-request levels. It illustrates key concepts such as PII filtering, guardrails for harmful content, function call overrides, logging, and human-in-the-loop approval workflows for sensitive operations. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this sample particularly valuable for understanding how to implement complex middleware pipelines and approval mechanisms within the new agent-based architecture.",
      "tags": [
        "agent",
        "middleware",
        "human_in_loop",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/Visualization/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/Visualization/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to generate visual representations of workflows using Mermaid and DOT (Graphviz) formats within the Microsoft Agent Framework. It covers key concepts of workflow construction and visualization, enabling developers to better understand, document, and debug complex workflow structures. Developers migrating from AutoGen, Semantic Kernel, or LangChain can reference this for implementing clear and maintainable workflow visualizations to enhance workflow transparency and observability.",
      "tags": [
        "workflow",
        "observability",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "Resources",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/SharedStates/Resources.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/SharedStates/Resources.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to encapsulate resource file reading in a reusable helper class within the Agent Framework's workflow context. It covers the concept of managing shared states and resources efficiently across workflow components. Developers migrating from AutoGen, Semantic Kernel, or LangChain should reference this for best practices on handling static resource access for workflows and agents.",
      "tags": [
        "workflow",
        "beginner",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/SharedStates/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/SharedStates/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to implement workflows with shared state management using the Microsoft Agent Framework. It showcases key concepts such as defining multiple executors, managing shared state across them, and using fan-out/fan-in patterns for parallel task execution and aggregation. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this to understand structuring complex workflows with shared data coordination and parallel processing in the Agent Framework.",
      "tags": [
        "workflow",
        "intermediate",
        "autogen_migration",
        "fan_out"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/Loop/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/Loop/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to implement a simple number guessing game using the Microsoft Agent Framework with a workflow that loops between two executors. It covers key concepts such as creating executors, building looped workflows with message passing, and handling stateful logic asynchronously. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this to learn how to model feedback loops and stateful workflows within the Agent Framework.",
      "tags": [
        "workflow",
        "beginner",
        "autogen_migration",
        "reflection"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/Concurrent/Concurrent/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/Concurrent/Concurrent/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to implement concurrent workflows using the Agent Framework, specifically illustrating the fan-out and fan-in patterns where multiple AI agents process the same input in parallel and their results are aggregated. It covers key concepts such as executor orchestration, message handling, and streaming workflow execution, showcasing a practical approach to achieving parallel task execution and aggregation within workflows. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this example invaluable for understanding how to model concurrent multi-agent interactions and coordinate their outputs effectively in the Agent Framework.",
      "tags": [
        "workflow",
        "parallel",
        "fan_out",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/Concurrent/MapReduce/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/Concurrent/MapReduce/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to build and execute a scalable map-reduce workflow using the Microsoft Agent Framework with a fan-out and fan-in concurrency pattern. It covers key concepts such as workflow construction with multiple executors (splitters, mappers, shufflers, reducers, and completers), parallel processing of large text data, persistence of intermediate results to disk, and real-time workflow event streaming and visualization. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this invaluable for implementing efficient, stateful, and observable parallel workflows that manage large data sets with fine-grained control over execution stages.",
      "tags": [
        "workflow",
        "advanced",
        "parallel",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/Declarative/GenerateCode/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/Declarative/GenerateCode/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to convert a declarative (YAML-based) workflow definition into executable C# code using the Agent Framework's DeclarativeWorkflowBuilder.Eject method. It highlights key concepts such as workflow parsing, code generation, and integration of declarative workflows into native code for improved maintainability and extensibility. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this sample valuable for understanding how to transition from YAML or other declarative formats to a code-driven workflow approach in the Agent Framework.",
      "tags": [
        "workflow",
        "tools",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "Generated",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/Declarative/ExecuteCode/Generated.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/Declarative/ExecuteCode/Generated.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This .NET sample demonstrates how to programmatically create and execute a declarative workflow using the Microsoft Agent Framework with Power FX expressions. It covers defining a root executor, initializing environment variables, and using declarative action executors to set workflow state by evaluating expressions, highlighting the use of structured variable updates and the integration of Power FX in workflows. Developers migrating from other AI orchestration frameworks like AutoGen or Semantic Kernel should reference this to understand how to adopt declarative workflows, utilize formula-driven conditions, and manage state effectively within the new framework.",
      "tags": [
        "workflow",
        "agent",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/Declarative/ExecuteCode/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/Declarative/ExecuteCode/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to execute a declarative workflow in code using the Azure AI Agents framework, specifically illustrating workflow creation from a YAML file, execution monitoring, and integration with Azure Foundry services. It covers key concepts such as declarative workflows, streaming workflow execution, event-driven monitoring with detailed logging and error handling, and file management via Foundry. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this sample to understand the declarative workflow execution model, streaming run observation, and leveraging persistent agent clients in Azure's agent ecosystem.",
      "tags": [
        "workflow",
        "intermediate",
        "streaming",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/Declarative/ExecuteWorkflow/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/Declarative/ExecuteWorkflow/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create and execute a declaratively-defined workflow using YAML in the Azure AI Agent Framework. It covers key concepts such as workflow creation from declarative definitions, checkpointing with JSON or in-memory stores, handling external requests to enable human-in-loop interaction, and resuming workflows from checkpoints to ensure fault tolerance and portability. Developers migrating from AutoGen, Semantic Kernel, or LangChain should reference this to understand how to leverage declarative workflows with checkpoint management and external input handling within the Agent Framework.",
      "tags": [
        "workflow",
        "checkpoint",
        "human_in_loop",
        "intermediate"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/Observability/AspireDashboard/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/Observability/AspireDashboard/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to implement observability in a Microsoft Agent Framework workflow using OpenTelemetry and visualize telemetry data in the Aspire Dashboard. It showcases key concepts such as building a sequential workflow with executors, enabling tracing for distributed workflows, and integrating telemetry exporters. Developers migrating from other AI orchestration frameworks like AutoGen, Semantic Kernel, or LangChain can reference this sample to understand how to instrument their workflows for observability and diagnostics within the Microsoft Agents ecosystem.",
      "tags": [
        "workflow",
        "observability",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/Observability/ApplicationInsights/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/Observability/ApplicationInsights/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to enable observability in a workflow using the Microsoft Agents AI Framework, specifically integrating tracing and telemetry with Application Insights via OpenTelemetry. It showcases a simple text processing pipeline where inputs are converted to uppercase and then reversed, illustrating the use of executors connected sequentially and how to instrument activities for monitoring and diagnostics. Developers migrating from frameworks such as AutoGen, Semantic Kernel, or LangChain can reference this to understand structured observability integration within agent workflows, enabling better traceability and diagnostics in their applications.",
      "tags": [
        "workflow",
        "observability",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/Agents/CustomAgentExecutors/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/Agents/CustomAgentExecutors/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create custom AI agent executors within a workflow using the Microsoft Agent Framework. Key concepts include defining custom executors with message handlers, managing agent state with threads, and orchestrating multi-agent workflows that alternate roles\u2014such as slogan generation and feedback provision\u2014until a quality criterion is met. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can use this pattern to gain fine-grained control over agent behaviors and workflow logic in complex scenarios.",
      "tags": [
        "agent",
        "workflow",
        "autogen_migration",
        "structured_output"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/Agents/FoundryAgent/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/Agents/FoundryAgent/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to integrate Azure Foundry persistent agents within a workflow using the Azure AI Agents framework. It covers key concepts such as creating and managing translation agents, building workflows with multiple agent executors connected in sequence, and streaming workflow execution with real-time event handling. Developers migrating from other frameworks like AutoGen or Semantic Kernel will find this sample useful for understanding persistent agent lifecycle management, workflow construction, and asynchronous streaming execution patterns in the new Agent Framework.",
      "tags": [
        "agent",
        "workflow",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "WorkflowHelper",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/Agents/WorkflowAsAnAgent/WorkflowHelper.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/Agents/WorkflowAsAnAgent/WorkflowHelper.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create a concurrent workflow using two language agents within the Microsoft Agent Framework. It covers key concepts such as building workflows with fan-out and fan-in executors, managing concurrent agent execution, and aggregating multiple agent responses. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this when implementing parallel processing patterns and orchestrating multiple agents within a unified workflow structure.",
      "tags": [
        "agent",
        "workflow",
        "parallel",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/Agents/WorkflowAsAnAgent/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/Agents/WorkflowAsAnAgent/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to treat a workflow as a single AI agent within the Microsoft Agent Framework, illustrating concurrent processing by coordinating language agents that respond in French and English. It introduces key concepts such as creating workflows as agents, agent threading, and handling streaming responses to provide interactive, multi-language conversational experiences. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this example instructive for understanding how to structure complex agent workflows that operate concurrently and stream outputs seamlessly within this framework.",
      "tags": [
        "agent",
        "workflow",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "WorkflowHelper",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/HumanInTheLoop/HumanInTheLoopBasic/WorkflowHelper.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/HumanInTheLoop/HumanInTheLoopBasic/WorkflowHelper.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates creating a simple number guessing game workflow using the Microsoft Agent Framework with human-in-the-loop interaction, showcasing how to build and connect executors in a loop with request ports and response messages. It covers key concepts such as workflow construction, executor communication, signal messaging, and reflecting executors for handling input and producing outputs dynamically. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this sample to understand how to model interactive workflows integrating human input within the native Microsoft Agent Framework.",
      "tags": [
        "workflow",
        "human_in_loop",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/HumanInTheLoop/HumanInTheLoopBasic/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/HumanInTheLoop/HumanInTheLoopBasic/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to implement human-in-the-loop interaction within the Microsoft Agent Framework workflows using RequestPort and ExternalRequest constructs. It features a number guessing game where the workflow emits requests to an external user, who responds interactively, illustrating event-driven communication and asynchronous response handling in workflows. Developers migrating from frameworks like AutoGen or Semantic Kernel should reference this to understand integrating interactive human responses within workflow executions.",
      "tags": [
        "workflow",
        "human_in_loop",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "Resources",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/ConditionalEdges/02_SwitchCase/Resources.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/ConditionalEdges/02_SwitchCase/Resources.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates a simple resource helper class for loading text resources from a specified folder within a .NET project, showcasing effective file handling practices. It covers foundational concepts around resource management within the Agent Framework workflows, facilitating cleaner separation of resource content from code logic. Developers migrating from AutoGen, Semantic Kernel, or LangChain frameworks can reference this to understand how to manage external resource dependencies in the updated .NET Agent Framework environment.",
      "tags": [
        "workflow",
        "beginner",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/ConditionalEdges/02_SwitchCase/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/ConditionalEdges/02_SwitchCase/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to implement conditional routing in an Agent Framework workflow using switch-case logic to handle multiple decision paths based on spam detection results. It highlights key concepts such as building complex decision trees with workflows, using multiple executors, and managing shared state across executors. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this example valuable for understanding how to translate multi-branch logic and structured output handling within the new Agent Framework environment.",
      "tags": [
        "workflow",
        "agent",
        "intermediate",
        "structured_output"
      ]
    },
    {
      "name": "Resources",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/ConditionalEdges/03_MultiSelection/Resources.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/ConditionalEdges/03_MultiSelection/Resources.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates a simple utility class for loading text resources from a specified folder within a .NET project. It covers basic file I/O operations relevant to resource management in Agent Framework applications, showcasing how to centralize resource access for workflows. Developers migrating from frameworks like AutoGen or Semantic Kernel can reference this pattern to manage workflow-dependent resources consistently and efficiently.",
      "tags": [
        "workflow",
        "beginner",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/ConditionalEdges/03_MultiSelection/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/ConditionalEdges/03_MultiSelection/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates advanced workflow orchestration using the Microsoft Agent Framework, specifically showcasing multi-selection routing with fan-out edges to trigger multiple executors based on email content analysis. It covers key concepts such as parallel execution, conditional routing with partitioners, and shared state across executors, emphasizing a scalable approach for processing and handling different email scenarios including spam detection, summarization, and database logging. Developers migrating from AutoGen, Semantic Kernel, or LangChain frameworks will find this example valuable for understanding how to implement complex conditional workflows with simultaneous multi-agent triggers in the .NET environment.",
      "tags": [
        "workflow",
        "fan_out",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "Resources",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/ConditionalEdges/01_EdgeCondition/Resources.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/ConditionalEdges/01_EdgeCondition/Resources.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates a simple utility class designed for loading resource files in a Workflow Edge Condition context, showcasing basic file handling within the Agent Framework. It covers foundational concepts such as resource management and integration within workflow samples, useful for managing external data dependencies. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this to understand how to handle resource files efficiently within the new .NET Agent Framework environment, particularly when conditional logic depends on external resource content.",
      "tags": [
        "workflow",
        "beginner",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/ConditionalEdges/01_EdgeCondition/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/ConditionalEdges/01_EdgeCondition/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates implementing conditional routing in workflows using edge conditions within the Microsoft Agent Framework. It highlights how to create decision-based automated email processing pipelines that route messages based on AI-generated spam detection results, showcasing key concepts such as agent instantiation, executor chaining, shared state management, and structured output handling. Developers migrating from other frameworks like AutoGen, Semantic Kernel, or LangChain will find it valuable for understanding how to implement conditional logic and orchestrate multi-agent workflows effectively.",
      "tags": [
        "workflow",
        "agent",
        "structured_output",
        "autogen_migration"
      ]
    },
    {
      "name": "WorkflowHelper",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/Checkpoint/CheckpointAndRehydrate/WorkflowHelper.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/Checkpoint/CheckpointAndRehydrate/WorkflowHelper.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create a workflow-based number guessing game using the Microsoft Agent Framework, emphasizing checkpointing and state rehydration capabilities. It showcases key concepts like executor communication via message passing, state management through checkpointing, and workflow building with feedback loops. Developers migrating from frameworks such as AutoGen, Semantic Kernel, or LangChain will find this sample valuable for understanding stateful workflow orchestration and executor interactions within the Agent Framework.",
      "tags": [
        "workflow",
        "checkpoint",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/Checkpoint/CheckpointAndRehydrate/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/Checkpoint/CheckpointAndRehydrate/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This .NET sample demonstrates how to implement and utilize checkpoints within a workflow, enabling saving and restoring the workflow's state at specific stages called super steps. It covers key Agent Framework concepts such as super steps, checkpoint creation at the end of each super step, and rehydration of workflows from saved checkpoints to resume execution seamlessly. Developers migrating from AutoGen, Semantic Kernel, or LangChain who need to maintain state and resume workflows across sessions should reference this sample for effective checkpointing strategies.",
      "tags": [
        "workflow",
        "checkpoint",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "WorkflowHelper",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/Checkpoint/CheckpointWithHumanInTheLoop/WorkflowHelper.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/Checkpoint/CheckpointWithHumanInTheLoop/WorkflowHelper.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates implementing a number guessing game workflow with human-in-the-loop interaction, using the Microsoft Agent Framework. It highlights key concepts such as defining executors, managing workflow state through checkpointing, and enabling external input through request ports. Developers migrating from AutoGen, Semantic Kernel, or LangChain can reference this to learn how to model interactive workflows with state persistence and reflection capabilities in the new framework.",
      "tags": [
        "workflow",
        "beginner",
        "checkpoint",
        "human_in_loop"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/Checkpoint/CheckpointWithHumanInTheLoop/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/Checkpoint/CheckpointWithHumanInTheLoop/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates creating a workflow in the Microsoft Agent Framework that incorporates human-in-the-loop interaction alongside checkpointing support, enabling workflow state persistence and resumption. It covers key concepts such as managing workflow supersteps, handling external Requests and Responses through RequestPort, and leveraging checkpointing for state restoration and continuation. Developers migrating from frameworks like AutoGen or Semantic Kernel who require robust workflow control with user interaction and reliable checkpointing should reference this sample to understand how to implement such patterns effectively.",
      "tags": [
        "workflow",
        "checkpoint",
        "human_in_loop",
        "intermediate"
      ]
    },
    {
      "name": "WorkflowHelper",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/Checkpoint/CheckpointAndResume/WorkflowHelper.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/Checkpoint/CheckpointAndResume/WorkflowHelper.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates building a checkpoint-enabled workflow using the Microsoft.Agent Framework, specifically implementing a number guessing game with two interconnected executors exchanging signals in a feedback loop. It covers key concepts such as workflow construction, executor state checkpointing and restoration, and message-driven interaction within a workflow context. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this example valuable for understanding how to implement stateful, resumable workflows that maintain conversational continuity across invocations.",
      "tags": [
        "workflow",
        "checkpoint",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/Checkpoint/CheckpointAndResume/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/Checkpoint/CheckpointAndResume/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the use of checkpoints in Agent Framework workflows, showcasing how to save and restore workflow states at the end of super steps. It covers key concepts such as super steps, checkpoint creation, and resuming execution from saved states, emphasizing robust workflow management and resiliency. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this sample to adopt advanced workflow control and state persistence techniques in their agent implementations.",
      "tags": [
        "workflow",
        "checkpoint",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/_Foundational/02_Streaming/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/_Foundational/02_Streaming/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to implement streaming output in workflows using the Microsoft Agent Framework, showcasing real-time event streaming as each workflow executor completes its task. It covers foundational workflow concepts such as building sequential workflows with executors, interacting with workflow events, and handling asynchronous streaming results. Developers migrating from AutoGen, Semantic Kernel, or LangChain will find this sample valuable for adapting to a model where intermediate workflow results are streamed live, enhancing observability and responsiveness in long-running or complex workflow executions.",
      "tags": [
        "workflow",
        "streaming",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/_Foundational/04_AgentWorkflowPatterns/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/_Foundational/04_AgentWorkflowPatterns/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to integrate multiple AI agents into workflows using the Agent Framework's AgentWorkflowBuilder, showcasing common workflow patterns such as sequential, concurrent, handoffs, and group chat interactions. Key concepts covered include composing agents as executors, managing multi-agent collaboration patterns, and streaming execution with event-driven outputs. Developers migrating from AutoGen, Semantic Kernel, or LangChain frameworks should reference this to understand modern workflow orchestration techniques and agent-to-agent communication patterns in the new Agent Framework.",
      "tags": [
        "agent",
        "workflow",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/_Foundational/05_MultiModelService/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/_Foundational/05_MultiModelService/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the creation and orchestration of a multi-agent sequential workflow using the Microsoft Agent Framework with multiple AI chat clients from different providers (Amazon Bedrock, Anthropic, OpenAI). It showcases how to define distinct agents with specific roles\u2014researcher, fact-checker, and reporter\u2014and compose them into a workflow that processes and refines content step-by-step while streaming output increments. Developers migrating from other frameworks like AutoGen, Semantic Kernel, or LangChain can reference this for understanding how to bind diverse AI models in a cohesive workflow with clear role separation, streaming, and multi-provider support.",
      "tags": [
        "agent",
        "workflow",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/_Foundational/03_AgentsInWorkflows/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/_Foundational/03_AgentsInWorkflows/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to integrate AI agents as executors within a workflow pipeline, showcasing a sequential translation chain among French, Spanish, and English language agents. It highlights key concepts such as building workflows by connecting multiple AI agents and triggering their execution via turn tokens, utilizing the Azure OpenAI chat client within the Microsoft Agent Framework. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this example to understand how to orchestrate agent-driven workflows with clear messaging and event handling patterns in .NET.",
      "tags": [
        "agent",
        "workflow",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/_Foundational/01_ExecutorsAndEdges/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/_Foundational/01_ExecutorsAndEdges/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the foundational concepts of building workflows using executors and edges within the Agent Framework. It illustrates how to sequentially connect processing units (executors) to transform input data, showcasing a simple text pipeline that converts text to uppercase and then reverses it. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this to understand how to architect and execute sequential workflows leveraging typed executors and edges in the new framework.",
      "tags": [
        "workflow",
        "beginner",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/OpenAI/Step02_ToolCall/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/OpenAI/Step02_ToolCall/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to implement conversational agents using Microsoft's Semantic Kernel and Agent Frameworks with OpenAI's GPT models. It showcases defining kernel functions as callable tools, integrating them as plugins or AI tools, and invoking agents that automatically select and execute these functions based on user input. Developers migrating from earlier frameworks like AutoGen or Semantic Kernel can reference this to understand the new Agent APIs, tool registration approaches, and function invocation patterns for building context-aware agents.",
      "tags": [
        "agent",
        "tools",
        "semantic_kernel_migration",
        "beginner"
      ]
    },
    {
      "name": "Program",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/OpenAI/Step01_Basics/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/OpenAI/Step01_Basics/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create and use AI Agents within the Microsoft Agent Framework, showcasing both the Semantic Kernel integration and the newer Azure AI OpenAI client approach. It covers key concepts like configuring agents with instructions, managing conversation threads, setting execution parameters, and handling streaming responses. Developers migrating from Semantic Kernel or AutoGen frameworks will find this sample useful for understanding how to implement conversational agents and manage chat interactions using the updated APIs and patterns in the Agent Framework.",
      "tags": [
        "agent",
        "semantic_kernel_migration",
        "autogen_migration",
        "streaming"
      ]
    },
    {
      "name": "Program",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/OpenAI/Step03_DependencyInjection/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/OpenAI/Step03_DependencyInjection/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to implement dependency injection for AI agents using the Microsoft Semantic Kernel and Agent Frameworks with OpenAI chat models. It covers creating and configuring agents with service collections, showcasing both Semantic Kernel agent setup and the new Agent Framework style with OpenAIClient integration. Developers migrating from Semantic Kernel, AutoGen, or other AI orchestration frameworks should reference this to understand modern best practices for managing agent lifecycles, dependency injection, and streamlined invocation patterns.",
      "tags": [
        "agent",
        "semantic_kernel_migration",
        "autogen_migration",
        "beginner"
      ]
    },
    {
      "name": "Program",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/AgentOrchestrations/Step03_Handoff/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/AgentOrchestrations/Step03_Handoff/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to implement a customer support handoff orchestration using the Semantic Kernel and the Agent Framework, highlighting how to set up multiple agents with delegated responsibilities and enable seamless transitions between them. It showcases key concepts such as defining agents with specialized instructions, integrating function plugins, and orchestrating handoffs based on user queries. Developers migrating from frameworks like AutoGen or earlier Semantic Kernel versions can reference this to understand structured agent collaboration and interactive workflows that enhance conversation management and response streaming.",
      "tags": [
        "agent",
        "workflow",
        "semantic_kernel_migration",
        "streaming"
      ]
    },
    {
      "name": "Program",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/AgentOrchestrations/Step02_Sequential/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/AgentOrchestrations/Step02_Sequential/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to perform sequential orchestrations using both the Semantic Kernel and the Agent Framework in a translation assistant scenario. It covers key concepts such as building sequential workflows with multiple agents, streaming responses, and runtime execution management within the Agent Framework. Developers migrating from Semantic Kernel, AutoGen, or similar frameworks can reference this to understand how to implement sequential agent workflows and integrate Azure OpenAI models using modern agent orchestration patterns.",
      "tags": [
        "agent",
        "workflow",
        "streaming",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/AgentOrchestrations/Step01_Concurrent/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/AgentOrchestrations/Step01_Concurrent/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to run concurrent orchestrations and agent workflows using both the Semantic Kernel and the Agent Framework. It highlights key concepts such as defining translation agents with language-specific instructions, managing concurrent execution, and streaming responses for real-time output. Developers migrating from Semantic Kernel or other agent orchestration frameworks should reference this to understand how to implement parallel agent workflows and leverage streaming in the Agent Framework.",
      "tags": [
        "agent",
        "workflow",
        "semantic_kernel_migration",
        "parallel"
      ]
    },
    {
      "name": "Program",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/AzureAIFoundry/Step04_CodeInterpreter/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/AzureAIFoundry/Step04_CodeInterpreter/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates integrating Azure AI Agents with the Semantic Kernel, focusing on using the Code Interpreter tool within agent conversations. It highlights the creation and management of persistent agents and threads, handling streamed AI responses with metadata such as generated code and citations. Developers migrating from AutoGen or previous Semantic Kernel setups will find this example valuable for understanding agent lifecycle management, tool integration, and response processing in the new Azure AI Agent Framework.",
      "tags": [
        "agent",
        "tools",
        "semantic_kernel_migration",
        "intermediate"
      ]
    },
    {
      "name": "Program",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/AzureAIFoundry/Step02_ToolCall/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/AzureAIFoundry/Step02_ToolCall/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This .NET sample demonstrates the integration of Azure AI Agents by defining and invoking AI agents with custom functions in two approaches: using the Semantic Kernel style and the newer Azure Foundry Agent APIs. It highlights key Agent Framework features including agent creation, tool/plugin addition via method bindings, handling streaming responses, and lifecycle management such as thread and agent cleanup. Developers migrating from older Semantic Kernel or AutoGen frameworks can reference this to understand how to adapt function calls, use persistent agents, and manage agent interactions with Azure AI according to the latest SDK patterns.",
      "tags": [
        "agent",
        "tools",
        "streaming",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/AzureAIFoundry/Step01_Basics/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/AzureAIFoundry/Step01_Basics/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create and interact with AI agents using the Azure AI Foundry SDK in a .NET environment, highlighting both the Semantic Kernel Agent and the Persistent Agent frameworks. It covers key Agent Framework concepts such as agent creation, thread management, invocation, and streaming response handling. Developers migrating from Semantic Kernel, AutoGen, or LangChain should reference this example to understand how to implement agent-based interactions and handle streaming chat responses in the Azure AI ecosystem.",
      "tags": [
        "agent",
        "semantic_kernel_migration",
        "streaming",
        "beginner"
      ]
    },
    {
      "name": "Program",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/AzureAIFoundry/Step03_DependencyInjection/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/AzureAIFoundry/Step03_DependencyInjection/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to integrate Azure AI Agent capabilities using dependency injection in a .NET application, showcasing both the Semantic Kernel based agent and the Azure Foundry agent creation and invocation patterns. Key concepts include setting up services with Microsoft.Extensions.DependencyInjection, injecting Azure credentials, managing agent lifecycle, and handling streaming chat responses asynchronously. Developers migrating from Semantic Kernel or other agent frameworks will find this particularly useful for adapting to Azure AI's persistent agents model and effective DI usage for modular and scalable bot applications.",
      "tags": [
        "agent",
        "semantic_kernel_migration",
        "dependency_injection",
        "streaming"
      ]
    },
    {
      "name": "Program",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/AzureOpenAIAssistants/Step04_CodeInterpreter/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/AzureOpenAIAssistants/Step04_CodeInterpreter/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create and manage AI assistants leveraging Azure OpenAI within the Microsoft Semantic Kernel migration context, specifically showcasing the use of code interpreter tools. It highlights key Agent Framework concepts such as configuring assistants, managing conversation threads, invoking AI agents asynchronously, processing generated code output, and handling message annotations including citations. Developers migrating from frameworks like AutoGen or the original Semantic Kernel will find this sample essential for understanding the new assistant-centric approach and thread management patterns in the updated SDK.",
      "tags": [
        "agent",
        "semantic_kernel_migration",
        "tools",
        "advanced"
      ]
    },
    {
      "name": "Program",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/AzureOpenAIAssistants/Step02_ToolCall/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/AzureOpenAIAssistants/Step02_ToolCall/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to migrate to the new Azure OpenAI Assistant client and agent frameworks by implementing agent-based question answering with tool (function) integration in .NET. It showcases both the Semantic Kernel (SK) agent pattern and the Azure AI agent framework (AF) approach for calling external functions as tools, managing conversation threads, and streaming responses. Developers migrating from Semantic Kernel, AutoGen, or LangChain will find this sample useful for understanding how to implement agents with plugin tools, manage chat state, and leverage streaming and function call capabilities in the latest Azure AI SDK.",
      "tags": [
        "agent",
        "semantic_kernel_migration",
        "autogen_migration",
        "streaming"
      ]
    },
    {
      "name": "Program",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/AzureOpenAIAssistants/Step01_Basics/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/AzureOpenAIAssistants/Step01_Basics/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create and use AI agents leveraging the Azure OpenAI Assistant Client within the evolving Semantic Kernel framework. It covers key concepts such as defining assistants with instructions, managing conversational threads, invoking agents both synchronously and via streaming, and cleaning up resources post-interaction. Developers migrating from previous Semantic Kernel versions or other frameworks like AutoGen will find this example valuable for understanding the updated agent creation and invocation patterns in the new Azure OpenAI Assistants paradigm.",
      "tags": [
        "agent",
        "semantic_kernel_migration",
        "streaming",
        "beginner"
      ]
    },
    {
      "name": "Program",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/AzureOpenAIAssistants/Step03_DependencyInjection/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/AzureOpenAIAssistants/Step03_DependencyInjection/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to use dependency injection in the Agent Framework to create and manage OpenAI-powered agents and assistant clients, showcasing both the Semantic Kernel (SK) and Agent Framework (AF) approaches. It highlights key concepts such as configuring services with Azure OpenAI credentials, creating assistant agents with specific instructions, managing conversational threads, and handling streaming responses. Developers migrating from Semantic Kernel or AutoGen who want to leverage dependency injection for agent orchestration and integrate Azure OpenAI services with reusable, maintainable patterns should reference this sample.",
      "tags": [
        "agent",
        "semantic_kernel_migration",
        "dependency_injection",
        "streaming"
      ]
    },
    {
      "name": "Program",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/AzureOpenAIResponses/Step02_ReasoningModel/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/AzureOpenAIResponses/Step02_ReasoningModel/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create conversational AI agents using the Azure OpenAI and Microsoft Semantic Kernel Agent Frameworks, focusing on advanced reasoning capabilities with detailed thinking steps. It covers key concepts such as configuring agent instructions, enabling and processing reasoning content (both synchronous and streaming), managing conversation threads, and customizing reasoning effort levels within agent options. Developers migrating from Semantic Kernel or AutoGen who want to implement intelligent reasoning agents with rich step-by-step explanations and streaming responses should reference this example as a foundational guide.",
      "tags": [
        "agent",
        "semantic_kernel_migration",
        "advanced",
        "streaming"
      ]
    },
    {
      "name": "Program",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/AzureOpenAIResponses/Step03_ToolCall/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/AzureOpenAIResponses/Step03_ToolCall/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to integrate and utilize the Agent Framework with Azure OpenAI's services by creating agents that invoke both Semantic Kernel and Azure Function based approaches for tool calls. It highlights key concepts such as defining kernel functions, registering plugins, and executing agent workflows asynchronously, providing a practical guide on migrating from older frameworks like Semantic Kernel to the new Agent Framework. Developers transitioning their conversational AI or tool-based solutions will find this sample valuable for understanding how to adapt method-based tool invocation patterns within the modernized agent architecture.",
      "tags": [
        "agent",
        "tools",
        "semantic_kernel_migration",
        "beginner"
      ]
    },
    {
      "name": "Program",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/AzureOpenAIResponses/Step01_Basics/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/AzureOpenAIResponses/Step01_Basics/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This .NET sample demonstrates how to use the Microsoft Semantic Kernel and Agent Frameworks with Azure OpenAI services to create conversational AI agents capable of generating jokes. It showcases setting up agents with instructions, invoking them asynchronously and via streaming, and managing conversation threads, highlighting key Agent Framework concepts such as agent creation, invocation options, streaming responses, and thread management. Developers migrating from Semantic Kernel or AutoGen frameworks will find this sample valuable for understanding the integration patterns and the transition to the enhanced Azure OpenAI client and agent APIs in the new Agent Framework.",
      "tags": [
        "agent",
        "streaming",
        "semantic_kernel_migration",
        "beginner"
      ]
    },
    {
      "name": "Program",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/AzureOpenAIResponses/Step04_DependencyInjection/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/AzureOpenAIResponses/Step04_DependencyInjection/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the integration of Azure OpenAI models with dependency injection in a .NET environment using both the Microsoft Semantic Kernel and Agent Framework (AF). It covers key concepts such as configuring AI agents via service collections, invoking agents asynchronously, and utilizing Azure identity for secure client creation. Developers migrating from Semantic Kernel or AutoGen frameworks will find this sample useful for understanding how to implement agent-based AI solutions with modern dependency injection patterns and service lifetimes in .NET applications.",
      "tags": [
        "agent",
        "semantic_kernel_migration",
        "autogen_migration",
        "beginner"
      ]
    },
    {
      "name": "Program",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/OpenAIAssistants/Step04_CodeInterpreter/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/OpenAIAssistants/Step04_CodeInterpreter/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create and use AI assistants with code interpreter capabilities using the Microsoft Semantic Kernel migration approach. It covers key Agent Framework concepts such as assistant creation, threaded conversations, invocation handling, and extraction of generated code and citations within conversations. Developers migrating from Semantic Kernel, AutoGen, or LangChain can reference this to understand the updated patterns for managing AI agent threads, working with OpenAI-based assistants, and handling AI-generated code execution in a .NET environment.",
      "tags": [
        "agent",
        "tools",
        "semantic_kernel_migration",
        "advanced"
      ]
    },
    {
      "name": "Program",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/OpenAIAssistants/Step02_ToolCall/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/OpenAIAssistants/Step02_ToolCall/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the migration from Semantic Kernel to the new Agent Framework by illustrating how to create and invoke AI agents using the OpenAI Assistants SDK. It covers key concepts such as initializing agents with custom tools (functions), managing conversation threads, and handling both streaming and non-streaming responses. Developers migrating from Semantic Kernel or AutoGen frameworks should consult this sample to understand how to leverage the new agent APIs for tool integration and conversational interactions effectively.",
      "tags": [
        "agent",
        "tools",
        "semantic_kernel_migration",
        "streaming"
      ]
    },
    {
      "name": "Program",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/OpenAIAssistants/Step01_Basics/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/OpenAIAssistants/Step01_Basics/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create and interact with AI assistants using the Microsoft Semantic Kernel Migration approach by leveraging both SKAgent and AFAgent patterns. It covers key concepts such as assistant creation, threaded conversations, prompt execution settings, streaming responses, and resource cleanup within the new AssistantClient API. Developers migrating from legacy Semantic Kernel or AutoGen frameworks will find this example crucial for understanding how to adapt their code to utilize the updated agent models and conversation management features effectively.",
      "tags": [
        "agent",
        "semantic_kernel_migration",
        "streaming",
        "beginner"
      ]
    },
    {
      "name": "Program",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/OpenAIAssistants/Step03_DependencyInjection/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/OpenAIAssistants/Step03_DependencyInjection/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to integrate OpenAI-based AI assistants using dependency injection in .NET, showcasing two different agent implementations: the Semantic Kernel (SK) Agent and the Agent Framework (AF) Agent. It covers key concepts such as setting up service collections, creating assistant clients and agents, managing conversational threads, and invoking agents with both streaming and non-streaming responses. Developers migrating from Semantic Kernel or AutoGen frameworks will find this sample invaluable for understanding how to modularize AI agents using dependency injection and adapt to the Agent Framework's service and invocation patterns.",
      "tags": [
        "agent",
        "semantic_kernel_migration",
        "autogen_migration",
        "streaming"
      ]
    },
    {
      "name": "Program",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/AzureOpenAI/Step02_ToolCall/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/AzureOpenAI/Step02_ToolCall/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to implement and invoke AI agents using the Azure AI and Semantic Kernel frameworks, focusing on integrating custom functions as tools within agents. It highlights key Agent Framework concepts such as defining kernel functions, registering plugins, setting agent instructions, and handling user input to invoke AI-driven responses. Developers migrating from Semantic Kernel or AutoGen frameworks will find this example valuable for understanding how to transition their tool-based conversational agents to the updated Azure SDK patterns and agent model.",
      "tags": [
        "agent",
        "tools",
        "beginner",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/AzureOpenAI/Step01_Basics/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/AzureOpenAI/Step01_Basics/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create and use AI chat agents within the Microsoft Semantic Kernel and Azure AI frameworks, focusing on joke-telling functionality. It showcases key Agent Framework concepts such as setting up a kernel with Azure OpenAI credentials, constructing chat completion agents with instructions, managing chat history threads, configuring prompt execution settings, and handling both streaming and non-streaming outputs. Developers migrating from prior Semantic Kernel or AutoGen implementations will find this sample valuable for understanding how to translate conversational AI agent patterns into the current Azure AI Agent Framework syntax and workflows.",
      "tags": [
        "agent",
        "chat_client",
        "streaming",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/AzureOpenAI/Step03_DependencyInjection/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/AzureOpenAI/Step03_DependencyInjection/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to set up and use AI Agents with dependency injection in the Microsoft Semantic Kernel migration context, specifically integrating Azure OpenAI services within the Agent Framework. It covers key concepts such as configuring service collections, registering AI agents as transient services, and invoking agents to process user input asynchronously. Developers migrating from Semantic Kernel or AutoGen frameworks will find this example valuable for understanding how to incorporate Azure OpenAI chat clients and AI Agents into modern .NET dependency injection patterns while leveraging built-in authentication and agent invocation methods.",
      "tags": [
        "agent",
        "semantic_kernel_migration",
        "azure_openai",
        "beginner"
      ]
    },
    {
      "name": "Program",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/OpenAIResponses/Step02_ReasoningModel/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/OpenAIResponses/Step02_ReasoningModel/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create and use an OpenAIResponseAgent in both the Semantic Kernel and Microsoft.Extensions.AI Agent Framework environments to handle advanced reasoning tasks, such as modifying React components based on natural language instructions. It covers key Agent Framework concepts including agent creation, invoking agents asynchronously with detailed reasoning options, managing conversation threads, and streaming responses with reasoning content. Developers migrating from Semantic Kernel or AutoGen frameworks can reference this sample to understand how to adapt reasoning models and agent invocation patterns to the Microsoft.Extensions.AI modern agent architecture while retaining detailed control over reasoning verbosity and streaming behavior.",
      "tags": [
        "agent",
        "semantic_kernel_migration",
        "streaming",
        "advanced"
      ]
    },
    {
      "name": "Program",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/OpenAIResponses/Step03_ToolCall/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/OpenAIResponses/Step03_ToolCall/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to implement and invoke AI agents using the Agent Framework with Semantic Kernel and OpenAI APIs. It highlights key concepts such as creating agents, adding plugins and tools from kernel functions, and handling streamed chat responses. Developers migrating from other frameworks like AutoGen or Semantic Kernel should reference this to understand how to integrate tool calls within agent workflows and leverage both Semantic Kernel and Agent Framework patterns effectively.",
      "tags": [
        "agent",
        "tools",
        "beginner",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/OpenAIResponses/Step01_Basics/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/OpenAIResponses/Step01_Basics/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the use of the Agent Framework with OpenAI clients to create conversational agents that tell jokes, showcasing both the traditional Semantic Kernel agent pattern and the newer AF (Agent Framework) client pattern. Key concepts covered include agent initialization, threading for conversation context, streaming and non-streaming response handling, and configuring agent invocation options such as token limits. Developers migrating from Semantic Kernel or AutoGen will find this sample useful for understanding how to adapt their conversational agent implementations to the new Agent Framework patterns and APIs for improved control and streaming capabilities.",
      "tags": [
        "agent",
        "chat_client",
        "semantic_kernel_migration",
        "streaming"
      ]
    },
    {
      "name": "Program",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/OpenAIResponses/Step04_DependencyInjection/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/OpenAIResponses/Step04_DependencyInjection/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to implement dependency injection for AI agents leveraging both the Semantic Kernel and Agent Framework with OpenAI clients. It covers key concepts such as configuring service collections, registering transient AI agents with specific instructions, and invoking agent responses asynchronously. Developers migrating from Semantic Kernel or AutoGen frameworks will find this example useful for understanding how to structure agent initialization and dependency injection in modern .NET applications using the Agent Framework.",
      "tags": [
        "agent",
        "dependency_injection",
        "semantic_kernel_migration",
        "beginner"
      ]
    },
    {
      "name": "Program",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/Playground/SemanticKernelBasic/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/Playground/SemanticKernelBasic/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create and interact with a persistent Azure AI Agent using the Microsoft Semantic Kernel framework, specifically showcasing the creation, invocation, and management of an agent thread with a code interpreter tool. Key concepts covered include the definition of a persistent agent with custom instructions and tools, executing asynchronous conversation threads, and detailed logging of agent chat messages including metadata and content annotations. Developers migrating from other AI frameworks like AutoGen, Semantic Kernel, or LangChain should reference this sample to understand how to manage agent lifecycles and thread-based conversational workflows in the new Semantic Kernel migration context.",
      "tags": [
        "agent",
        "semantic_kernel_migration",
        "advanced",
        "tools"
      ]
    },
    {
      "name": "ServiceDefaultsExtensions",
      "category": "AgentWebChat",
      "file_path": "dotnet/samples/AgentWebChat/AgentWebChat.ServiceDefaults/ServiceDefaultsExtensions.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/AgentWebChat/AgentWebChat.ServiceDefaults/ServiceDefaultsExtensions.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to configure common .NET services such as service discovery, resilience, health checks, and OpenTelemetry instrumentation within an Agent Web Chat application using the Agent Framework. It highlights key concepts like setting up default service behaviors, integrating OpenTelemetry for observability, and managing health checks endpoints crucial for microservice readiness and liveness probes. Developers migrating from other frameworks like AutoGen or Semantic Kernel will find this sample essential for understanding how to implement standard service defaults and observability patterns in the Agent Framework context.",
      "tags": [
        "agent",
        "observability",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "IAgentClient",
      "category": "AgentWebChat",
      "file_path": "dotnet/samples/AgentWebChat/AgentWebChat.Web/IAgentClient.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/AgentWebChat/AgentWebChat.Web/IAgentClient.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates an interface and supporting class for managing agent interactions with streaming responses in a web chat context using the Agent Framework. It covers key concepts such as asynchronous streaming of agent responses, handling conversational threading, and retrieving agent metadata via the A2A (Agent-to-Agent) protocol. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this when implementing persistent, thread-based chat experiences with agents that require real-time incremental response handling and metadata integration.",
      "tags": [
        "agent",
        "chat_client",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "OpenAIResponsesAgentClient",
      "category": "AgentWebChat",
      "file_path": "dotnet/samples/AgentWebChat/AgentWebChat.Web/OpenAIResponsesAgentClient.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/AgentWebChat/AgentWebChat.Web/OpenAIResponsesAgentClient.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to implement a simple chat client that communicates with an AI agent using the OpenAI Response protocol within the Microsoft Agent Framework. It covers key concepts such as streaming responses, agent communication protocols, and integration with OpenAI models via an IAgentClient implementation. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this sample to understand how to adapt their chat client implementations to leverage streaming and response handling within the Agent Framework.",
      "tags": [
        "agent",
        "chat_client",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "A2AAgentClient",
      "category": "AgentWebChat",
      "file_path": "dotnet/samples/AgentWebChat/AgentWebChat.Web/A2AAgentClient.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/AgentWebChat/AgentWebChat.Web/A2AAgentClient.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to implement an A2A (Agent-to-Agent) client in a .NET web application, enabling communication with multiple agents using the Azure AI Agents SDK. It covers key concepts such as streaming agent responses, managing concurrent clients for different agents, converting chat messages to agent-understandable formats, and handling complex response types like AgentMessage and AgentTask artifacts. Developers migrating from other AI agent frameworks (AutoGen, Semantic Kernel, LangChain) should reference this for insights on managing multiple agents effectively, adapting message formats, and implementing robust error handling in agent communication workflows.",
      "tags": [
        "agent",
        "chat_client",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "AgentDiscoveryClient",
      "category": "AgentWebChat",
      "file_path": "dotnet/samples/AgentWebChat/AgentWebChat.Web/AgentDiscoveryClient.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/AgentWebChat/AgentWebChat.Web/AgentDiscoveryClient.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to implement a client for discovering available agents via HTTP calls within the Agent Web Chat framework. It covers key concepts such as making asynchronous API requests to retrieve agent information and deserializing JSON data into strongly-typed objects, which are fundamental in managing agent discovery workflows. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this sample to understand the patterns for integrating external agent discovery APIs and adapting existing logic to the Agent Framework's HTTP client patterns.",
      "tags": [
        "agent",
        "chat_client",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "AgentWebChat",
      "file_path": "dotnet/samples/AgentWebChat/AgentWebChat.Web/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/AgentWebChat/AgentWebChat.Web/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This .NET sample demonstrates how to build a web chat agent using the Microsoft Agent Framework, integrating multiple agent clients including discovery and asynchronous communication clients. It covers foundational concepts such as service registration, HTTP client configuration, and Razor components for interactive web UI in the context of agent-based conversational applications. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this to understand how to set up agent clients, configure service lifetimes, and implement server-side rendering for agent-driven web chat interfaces.",
      "tags": [
        "agent",
        "chat_client",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "ActorFrameworkWebApplicationExtensions",
      "category": "AgentWebChat",
      "file_path": "dotnet/samples/AgentWebChat/AgentWebChat.AgentHost/ActorFrameworkWebApplicationExtensions.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/AgentWebChat/AgentWebChat.AgentHost/ActorFrameworkWebApplicationExtensions.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to extend an ASP.NET Core WebApplication to support agent discovery endpoints using the Actor Framework. It covers key concepts such as mapping endpoint routes for agent catalogs and retrieving agent metadata asynchronously, showcasing how to expose agent information as HTTP APIs. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this example to understand how to structure agent discovery routes and integrate agent hosting within a web application in the Actor Framework paradigm.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "AgentWebChat",
      "file_path": "dotnet/samples/AgentWebChat/AgentWebChat.AgentHost/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/AgentWebChat/AgentWebChat.AgentHost/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to build and host multiple AI agents using the .NET Agent Framework, specifically configuring agents that emulate distinct personalities ('pirate' and 'knights-and-knaves'). It covers core concepts such as defining agents with custom instructions, setting up concurrent agent workflows, integrating OpenAPI for discoverability and client communication, and configuring ASP.NET Core middleware for agent hosting and interaction. Developers migrating from frameworks like AutoGen or Semantic Kernel can reference this sample to understand how to define conversational agents, manage multiple agent workflows concurrently, and expose agents over HTTP endpoints using the latest .NET extensibility and integration patterns.",
      "tags": [
        "agent",
        "workflow",
        "chat_client",
        "autogen_migration"
      ]
    },
    {
      "name": "ModelExtensions",
      "category": "AgentWebChat",
      "file_path": "dotnet/samples/AgentWebChat/AgentWebChat.AppHost/ModelExtensions.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/AgentWebChat/AgentWebChat.AppHost/ModelExtensions.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample provides extension methods to easily configure and manage AI models as resources within a distributed application using the Agent Framework. It demonstrates integrating various AI model providers such as OpenAI, Azure OpenAI, and Azure AI Inference, showcasing conditional resource configuration based on the application execution context (run or publish mode). Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can leverage this sample to understand managing and configuring AI model resources systematically, adapting to both development and production stages in agent-based chatbot applications.",
      "tags": [
        "agent",
        "advanced",
        "autogen_migration",
        "chat_client"
      ]
    },
    {
      "name": "Program",
      "category": "AgentWebChat",
      "file_path": "dotnet/samples/AgentWebChat/AgentWebChat.AppHost/Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/AgentWebChat/AgentWebChat.AppHost/Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the setup of an agent-based web chat application using the Azure OpenAI GPT-4o model within the Microsoft Semantic Kernel Agent Framework. It showcases key concepts such as defining AI models, project references between an agent host and a web frontend, and integration of Azure OpenAI services in a distributed application builder. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this example particularly useful for understanding project wiring, AI model configuration, and inter-project dependencies in an agent-oriented chat context.",
      "tags": [
        "agent",
        "chat_client",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "ChatClientExtensions",
      "category": "AgentWebChat",
      "file_path": "dotnet/samples/AgentWebChat/AgentWebChat.AgentHost/Utilities/ChatClientExtensions.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/AgentWebChat/AgentWebChat.AgentHost/Utilities/ChatClientExtensions.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to configure and extend the chat client builder within an Agent Web Chat application by integrating multiple AI chat providers such as Ollama, OpenAI, Azure OpenAI, and Azure AI Inference. It covers key concepts including provider-specific client construction, configuration parsing from connection strings, and adding observability using OpenTelemetry tracing. Developers migrating from other frameworks like AutoGen or Semantic Kernel should reference this when adapting provider integration and observability patterns to ensure consistent and extensible chat client setups in the Agent Framework.",
      "tags": [
        "agent",
        "chat_client",
        "observability",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "ChatClientConnectionInfo",
      "category": "AgentWebChat",
      "file_path": "dotnet/samples/AgentWebChat/AgentWebChat.AgentHost/Utilities/ChatClientConnectionInfo.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/AgentWebChat/AgentWebChat.AgentHost/Utilities/ChatClientConnectionInfo.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to parse and encapsulate chat client connection information into a structured configuration object using a connection string. It covers key Agent Framework concepts such as flexible client provider support (including OpenAI, AzureOpenAI, Ollama, and others), model selection, and secure connection handling. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this pattern to correctly configure chat clients and manage diverse provider connections in a consistent and extensible manner within the Agent Framework.",
      "tags": [
        "agent",
        "chat_client",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "dotnet_overview",
      "category": "root",
      "file_path": "dotnet/samples/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides an overview of the Microsoft Agent Framework samples, illustrating how to build AI-powered agents using the unified ChatClientAgent class and various AIAgent subclasses for proxying remote agents. It covers fundamental agent concepts, provider-specific implementations, and observability integrations such as OpenTelemetry, making it essential for developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain to understand core capabilities and telemetry instrumentation within the new framework. The resource also directs users to targeted sample categories and migration guides to facilitate a smooth transition and deeper learning.",
      "tags": [
        "documentation",
        "agent",
        "beginner",
        "chat_client",
        "semantic_kernel_migration",
        "observability",
        "agent_providers"
      ]
    },
    {
      "name": "SemanticKernelMigration_documentation",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This migration guide comprehensively details the transition from Semantic Kernel to the Agent Framework, highlighting namespace changes, simplified agent creation, improved thread management, streamlined tool registration, and updated invocation patterns. It explains how the Agent Framework offers a unified and performant API experience with enhanced developer ergonomics and better integration with AI providers. Developers moving from Semantic Kernel or similar frameworks like AutoGen or LangChain should consult this guide for clear, practical steps and code examples to adapt their agents and workflows efficiently within the new framework.",
      "tags": [
        "documentation",
        "agent",
        "semantic_kernel_migration",
        "intermediate",
        "tools",
        "streaming",
        "chat_client"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This Getting Started documentation introduces essential concepts and components of the Agent Framework, covering foundational functionalities such as creating agents, integrating with providers, enabling observability with OpenTelemetry, and managing workflows. It highlights key capabilities including agent creation, telemetry integration, and protocol management to effectively utilize the framework's core features. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this guide to build a solid baseline understanding of agent development and workflow orchestration within the new ecosystem.",
      "tags": [
        "documentation",
        "agent",
        "workflow",
        "beginner",
        "observability",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "A2AClientServer_documentation",
      "category": "A2AClientServer",
      "file_path": "dotnet/samples/A2AClientServer/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/A2AClientServer/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides a detailed walkthrough of building and running an Agent2Agent (A2A) client-server architecture using the official A2A C# SDK, demonstrating how to expose agents via the A2A protocol and invoke them programmatically. Key capabilities covered include configuring agents for different AI backends (OpenAI chat completion and Azure AI), testing agents through REST clients and the A2A Inspector tool, and orchestrating multiple specialized agents to collaboratively answer queries. Developers migrating from frameworks like AutoGen or Semantic Kernel will find this guide essential for understanding A2A protocol integration, multi-agent federation patterns, and agent service management in a .NET context.",
      "tags": [
        "documentation",
        "agent",
        "chat_client",
        "beginner",
        "intermediate",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "A2AClientServer_documentation",
      "category": "A2AClientServer",
      "file_path": "dotnet/samples/A2AClientServer/A2AClient/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/A2AClientServer/A2AClient/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation demonstrates how to implement an A2A (Agent to Agent) Client utilizing a command line interface within the Agent Framework. It covers key capabilities such as invoking multiple agents through the A2A protocol by specifying agent URLs and managing environment variables for configuration. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this guide useful for understanding agent orchestration and communication patterns in the Agent Framework, particularly for client-server scenarios involving multiple distributed agents.",
      "tags": [
        "documentation",
        "agent",
        "chat_client",
        "beginner",
        "autogen_migration",
        "semantic_kernel_migration",
        "langchain_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation offers a comprehensive introduction to workflows in the Agent Framework, covering foundational concepts such as executors, edges, streaming, and agent integration. It also explores advanced topics like concurrent execution patterns (fan-out and fan-in), conditional routing, checkpointing, human-in-the-loop interactions, and declarative workflows, providing practical sample implementations. Developers migrating from other AI orchestration frameworks like AutoGen, Semantic Kernel, or LangChain should consult this guide to understand core workflow constructs, concurrency, state management, and human interaction models within the Agent Framework.",
      "tags": [
        "documentation",
        "workflow",
        "agent",
        "beginner",
        "intermediate",
        "semantic_kernel_migration",
        "autogen_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Agents/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Agents/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This Getting Started guide provides a comprehensive introduction to building and running single agents using the Agent Framework with Azure OpenAI services. It covers fundamental capabilities such as multi-turn conversations, function tools, human-in-the-loop approvals, structured output, state persistence, middleware integration, and multimodal inputs like images. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this resource essential for understanding core agent construction patterns, authentication setups, and practical sample implementations to accelerate adoption of the Agent Framework.",
      "tags": [
        "documentation",
        "agent",
        "beginner",
        "azure_openai",
        "multimodal",
        "structured_output",
        "human_in_loop"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/AgentProviders/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/AgentProviders/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides comprehensive samples on creating AIAgent instances using a wide variety of providers, including Azure OpenAI, Ollama, ONNX, and custom implementations. It highlights the flexibility of the Agent Framework to integrate with different underlying inference services, making it crucial for developers to understand initialization and configuration of agents across platforms. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this guide to learn detailed provider-specific setup and best practices for agent instantiation within the Agent Framework ecosystem.",
      "tags": [
        "documentation",
        "agent",
        "beginner",
        "autogen_migration",
        "semantic_kernel_migration",
        "langchain_migration",
        "tutorial"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/ModelContextProtocol/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/ModelContextProtocol/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides a beginner-friendly introduction to the Model Content Protocol (MCP) within the Agent Framework, demonstrating how to configure and run agent samples that interact with Azure OpenAI services. It covers the setup of prerequisites, environment configuration, authentication via Azure CLI, and running MCP server tools with an agent both with and without authorization. Developers migrating from AutoGen, Semantic Kernel, or LangChain will find this guide useful for understanding how to implement and run agents using the MCP pattern in .NET, especially when integrating with Azure AI services.",
      "tags": [
        "documentation",
        "agent",
        "tools",
        "beginner",
        "autogen_migration",
        "semantic_kernel_migration",
        "langchain_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/AgentOpenTelemetry/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/AgentOpenTelemetry/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation demonstrates integrating OpenTelemetry with the Microsoft Agent Framework, showcasing real-time telemetry visualization using the Aspire Dashboard and Azure OpenAI for agent interactions. It highlights key Agent Framework features such as automatic instrumentation, custom tracing spans, conversation threading, and error handling with telemetry correlation. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this guide to implement observability and performance monitoring within their AI agent applications using .NET and Azure OpenAI.",
      "tags": [
        "documentation",
        "agent",
        "observability",
        "tools",
        "intermediate",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/AgentWithOpenAI/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/AgentWithOpenAI/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation introduces how to integrate the Agent Framework with the OpenAI SDK, focusing on the use of native OpenAI exchange types to avoid conflicts with default Microsoft.Extensions.AI.Abstractions types. It covers creating and running basic AI agents using OpenAI-specific types, demonstrating key interoperability capabilities within the .NET Agent Framework. Developers migrating from other frameworks like AutoGen, Semantic Kernel, or LangChain who rely on the OpenAI SDK will find this guide essential to facilitate a smooth transition without type conflicts.",
      "tags": [
        "documentation",
        "agent",
        "beginner",
        "openai",
        "autogen_migration",
        "semantic_kernel_migration",
        "langchain_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/ModelContextProtocol/Agent_MCP_Server/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/ModelContextProtocol/Agent_MCP_Server/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation demonstrates how to integrate and use tools from a Model Context Protocol (MCP) server within the Agent Framework. It covers essential features such as connecting to an MCP server, retrieving available tools, converting those tools into AIFunction instances compatible with agents, and invoking these tools via function calling. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this guide invaluable for adopting MCP standardized context provisioning to enhance agent capabilities and interoperability.",
      "tags": [
        "documentation",
        "agent",
        "tools",
        "intermediate",
        "autogen_migration",
        "semantic_kernel_migration",
        "langchain_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/ModelContextProtocol/Agent_MCP_Server_Auth/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/ModelContextProtocol/Agent_MCP_Server_Auth/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation demonstrates how to integrate and authenticate an Agent Framework client with a protected Model Context Protocol (MCP) server using OAuth 2.0 authorization flow. Key features include connecting to an MCP server with secure OAuth authentication, converting MCP tools into agent-compatible functions, and invoking those tools via function calling. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this guide when implementing secure OAuth-based access to external toolsets or services within an agent-driven architecture.",
      "tags": [
        "documentation",
        "agent",
        "tools",
        "advanced",
        "autogen_migration",
        "semantic_kernel_migration",
        "langchain_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/ModelContextProtocol/FoundryAgent_Hosted_MCP/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/ModelContextProtocol/FoundryAgent_Hosted_MCP/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides a comprehensive getting started guide for configuring the Agent Framework with Azure Foundry, focusing on environment setup and authentication prerequisites. It covers key capabilities such as integrating the Azure Foundry service with the Agent Framework via model context protocol, demonstrating how to prepare the development environment for running hosted agents. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this essential for understanding authentication setup and service endpoint configuration in the new Agent Framework context.",
      "tags": [
        "documentation",
        "beginner",
        "agent",
        "autogen_migration",
        "semantic_kernel_migration",
        "langchain_migration",
        "cloud_integration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/AgentProviders/Agent_With_A2A/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/AgentProviders/Agent_With_A2A/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides a step-by-step guide to setting up and running AI agents using the Agent Framework with the A2A (Agent-to-Agent) client. It covers the prerequisite environment setup, including .NET SDK requirements and configuring connections to an A2A agent host, and demonstrates how to instantiate and execute AI agents that leverage direct configuration and private discovery mechanisms. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this guide to understand how to integrate and run A2A-based agents in advanced agent orchestration scenarios within the Agent Framework.",
      "tags": [
        "documentation",
        "agent",
        "advanced",
        "a2a_integration",
        "beginner",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/AgentProviders/Agent_With_OpenAIResponses/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/AgentProviders/Agent_With_OpenAIResponses/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This Getting Started guide details the initial setup required for developing agents within the Agent Framework using OpenAI responses. It covers essential prerequisites such as installing the .NET 8.0 SDK, configuring environment variables with OpenAI API keys, and optionally setting the AI model. Developers migrating from AutoGen, Semantic Kernel, or LangChain will find this documentation critical for configuring their environment and understanding foundational integration steps with OpenAI for agent-driven workflows.",
      "tags": [
        "guide",
        "agent",
        "beginner",
        "autogen_migration",
        "semantic_kernel_migration",
        "langchain_migration",
        "tools"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/AgentProviders/Agent_With_CustomImplementation/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/AgentProviders/Agent_With_CustomImplementation/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation demonstrates how to create a fully custom agent implementation within the Agent Framework without relying on external AI services. It showcases key capabilities such as synchronous and streaming invocation modes and the foundational requirements for building custom logic or integrating alternative AI models. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this guide when they need to implement rule-based or non-standard agents with complete control over behavior and processing.",
      "tags": [
        "documentation",
        "agent",
        "custom_implementation",
        "beginner",
        "streaming",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/AgentProviders/Agent_With_AzureOpenAIChatCompletion/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/AgentProviders/Agent_With_AzureOpenAIChatCompletion/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides a beginner-level guide for setting up an Agent Framework sample that integrates with Azure OpenAI Chat Completion. It covers key concepts such as Azure OpenAI service authentication using Azure CLI credentials and configuring environment variables for deployment. Developers migrating from other frameworks like AutoGen, Semantic Kernel, or LangChain should reference this guide to understand authentication setup and basic environment configuration for leveraging Azure OpenAI within the Agent Framework.",
      "tags": [
        "documentation",
        "agent",
        "chat_client",
        "beginner",
        "azure_openai",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/AgentProviders/Agent_With_OpenAIChatCompletion/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/AgentProviders/Agent_With_OpenAIChatCompletion/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This Getting Started guide details the basic setup required to run an Agent using the OpenAI Chat Completion service within the Agent Framework. It covers essential prerequisites like installing .NET 8.0 SDK and configuring environment variables for OpenAI API keys and models. Developers migrating from frameworks such as AutoGen, Semantic Kernel, or LangChain will find this documentation valuable for quickly configuring their environment to leverage Agent Framework's chat capabilities and understand its initial integration points.",
      "tags": [
        "documentation",
        "agent",
        "chat_client",
        "beginner",
        "openai",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/AgentProviders/Agent_With_ONNX/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/AgentProviders/Agent_With_ONNX/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation demonstrates how to set up and run an agent using an ONNX model within the Agent Framework, highlighting the prerequisite environment configurations and the limitation that ONNX does not support function calling. It guides developers through downloading an ONNX model and configuring environment variables to enable the agent's operation with pre-trained ONNX models. Developers migrating from other frameworks such as AutoGen, Semantic Kernel, or LangChain should consult this guide when they want to leverage ONNX models for efficient, local AI inference within the Agent Framework.",
      "tags": [
        "documentation",
        "agent",
        "beginner",
        "autogen_migration",
        "semantic_kernel_migration",
        "langchain_migration",
        "onnx"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/AgentProviders/Agent_With_AzureFoundryAgent/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/AgentProviders/Agent_With_AzureFoundryAgent/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This Getting Started guide explains how to configure Azure Foundry as an agent provider within the Agent Framework, emphasizing environment setup, Azure credential authentication, and integration with Azure CLI. It highlights key capabilities like using Azure Foundry service endpoints and deployment configurations to enable scalable, cloud-based AI agents. Developers migrating from frameworks such as AutoGen, Semantic Kernel, or LangChain should consult this documentation when transitioning to Azure-powered agent deployments requiring seamless Azure identity authentication and service setup.",
      "tags": [
        "documentation",
        "agent",
        "beginner",
        "autogen_migration",
        "semantic_kernel_migration",
        "langchain_migration",
        "azure_integration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/AgentProviders/Agent_With_Ollama/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/AgentProviders/Agent_With_Ollama/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides a step-by-step guide to setting up the Ollama model provider within the Agent Framework using Docker on Windows. It covers essential prerequisites, Docker commands for launching Ollama containers with CPU or GPU support, and environment variable configuration to enable seamless interaction with Ollama models. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this guide to adopt the Agent Framework's flexible agent provider integration and model invocation patterns.",
      "tags": [
        "documentation",
        "agent",
        "beginner",
        "autogen_migration",
        "semantic_kernel_migration",
        "langchain_migration",
        "tools"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/AgentProviders/Agent_With_AzureOpenAIResponses/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/AgentProviders/Agent_With_AzureOpenAIResponses/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This Getting Started guide demonstrates how to configure and authenticate an Agent Framework setup using Azure OpenAI services with .NET 8.0 SDK. It covers essential prerequisites including Azure CLI authentication and environment variable configuration to connect agents with Azure OpenAI endpoints. Developers migrating from frameworks like AutoGen, Semantic Kernel, and LangChain should reference this documentation to understand how to initialize and authenticate agents in a Microsoft Azure context using the Agent Framework.",
      "tags": [
        "documentation",
        "beginner",
        "agent",
        "azure_openai",
        "autogen_migration",
        "semantic_kernel_migration",
        "langchain_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/AgentProviders/Agent_With_AzureFoundryModel/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/AgentProviders/Agent_With_AzureFoundryModel/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation demonstrates how to create and use a simple AI agent in the Agent Framework that leverages any model hosted on Azure AI Foundry, including models from a variety of providers like Microsoft, OpenAI, and Hugging Face. It highlights key capabilities such as flexible model selection, environment configuration, and integration with Azure AI Foundry using the OpenAI SDK. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should consult this guide when adapting agents to Azure AI Foundry models, especially to understand authentication and model deployment nuances.",
      "tags": [
        "documentation",
        "agent",
        "beginner",
        "azure_foundry",
        "openai_sdk",
        "semantic_kernel_migration",
        "autogen_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/AgentProviders/Agent_With_OpenAIAssistants/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/AgentProviders/Agent_With_OpenAIAssistants/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides a Getting Started guide focused on setting up an Agent with OpenAI Assistants within the Agent Framework. It covers key prerequisites, environment configuration, and highlights the deprecation of the OpenAI Assistants API, guiding developers on migration considerations. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this resource useful for initializing agent configurations and understanding updated API usage in the context of .NET 8.0 and OpenAI integration.",
      "tags": [
        "guide",
        "agent",
        "beginner",
        "autogen_migration",
        "semantic_kernel_migration",
        "langchain_migration",
        "chat_client"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Agents/Agent_Step11_UsingImages/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Agents/Agent_Step11_UsingImages/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation explains how to create and utilize a vision-enabled AI agent capable of processing multimodal inputs combining images and text using Azure OpenAI services. It highlights key Agent Framework features such as persistent agent creation, handling of Uri-referenced images, and multimodal message processing. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this guide when implementing image analysis or multimodal capabilities in their conversational AI agents.",
      "tags": [
        "documentation",
        "agent",
        "beginner",
        "multimodal",
        "azure_openai",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Agents/Agent_Step10_AsMcpTool/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Agents/Agent_Step10_AsMcpTool/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation demonstrates how to expose an existing AI agent as a Model Context Protocol (MCP) tool, highlighting the interoperability features of the Agent Framework. It guides developers through running the sample with MCP clients or the MCP Inspector tool, showcasing how to integrate Azure AI Foundry with the agent for enhanced capabilities. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this guide to understand how to leverage MCP for tool-based agent integration and runtime inspection.",
      "tags": [
        "documentation",
        "agent",
        "tools",
        "interoperability",
        "beginner",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Agents/Agent_Step14_Middleware/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Agents/Agent_Step14_Middleware/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides an in-depth tutorial on integrating middleware within the Agent Framework, showcasing how to intercept and customize chat client calls, agent execution, and function invocations. It highlights key capabilities such as global and per-request middleware application, PII filtering, logging, and function overriding with Azure OpenAI integration. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this essential for implementing sophisticated agent-level and request-level middleware to enhance control and observability in their AI agent workflows.",
      "tags": [
        "documentation",
        "agent",
        "middleware",
        "chat_client",
        "intermediate",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/Visualization/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/Visualization/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation demonstrates how to visualize complex workflows within the Agent Framework using the `ToMermaidString()` and `ToDotString()` extension methods. It highlights the framework's support for visualizing map-reduce style workflows with fan-out/fan-in patterns, aiding developers in understanding and debugging workflow structure. Developers migrating from other orchestration or agent frameworks like AutoGen, Semantic Kernel, or LangChain can leverage this guide to adopt built-in visualization tools for better observability and workflow management.",
      "tags": [
        "documentation",
        "workflow",
        "agent",
        "intermediate",
        "fan_out",
        "observability",
        "autogen_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet/samples/GettingStarted/Workflows/Declarative/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/GettingStarted/Workflows/Declarative/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation demonstrates how to parse and execute declarative Foundry Workflow files (YAML) within the Agent Framework, enabling developers to define workflows via configuration rather than solely code. It covers critical aspects like configuring Azure Foundry Project access, setting up environment secrets securely, authorizing with Azure CLI, and executing declarative workflows, highlighting seamless integration with code-based workflows. Migrating developers from AutoGen, Semantic Kernel, or LangChain should reference this guide to understand declarative workflow execution, environment setup, and agent configuration in the Agent Framework ecosystem.",
      "tags": [
        "documentation",
        "agent",
        "workflow",
        "beginner",
        "autogen_migration",
        "semantic_kernel_migration",
        "langchain_migration"
      ]
    },
    {
      "name": "SemanticKernelMigration_documentation",
      "category": "SemanticKernelMigration",
      "file_path": "dotnet/samples/SemanticKernelMigration/Playground/README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet/samples/SemanticKernelMigration/Playground/README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides a practical playground environment for developers migrating from the Semantic Kernel framework to the new Agent Framework (AF). It demonstrates how to leverage automatic AI migration techniques and guides developers through updating project references and code structure compliant with AF standards. Developers transitioning from Semantic Kernel who want hands-on experience with migration scenarios and prompt-driven code adaptation should reference this material.",
      "tags": [
        "documentation",
        "agent",
        "beginner",
        "semantic_kernel_migration",
        "tools",
        "chat_client",
        "automation"
      ]
    }
  ],
  "generated_at": "2025-10-15T06:19:04.257656Z"
}